
use crate::{NamedObjectDesc, NamedObjectBody, NamedObject, Serialize, Deserialize, ObjectBuilder, NearResult, ObjectBodyTrait, ObjectTypeCode, ObjectDescTrait, ObjectId, Area, PublicKey, NearError, ErrorCode};

pub type RawObjectDesc<T, E> = NamedObjectDesc<RawObjectDescContent<T, E>>;
pub type RawObjectBody = NamedObjectBody<RawObjectBodyContent>;
pub type RawObjectBuilder<T, E> = ObjectBuilder<RawObjectDescContent<T, E>, RawObjectBodyContent>;
pub type RawObject<T, E> = NamedObject<RawObjectDescContent<T, E>, RawObjectBodyContent>;

const DATACONTENT_NONE_DEFAULT: u8      = 0u8;
const DATACONTENT_ERROR_DEFAULT: u8     = 1u8;
const DATACONTENT_CONTENT_DEFAULT: u8   = 2u8;

#[derive(Clone, Default)]
pub enum RawContent<T, E> {
    #[default]
    None,
    Error(E),
    Content(RawData<T>),
}

#[derive(Clone, Default)]
pub struct RawData<T> {
    pub data: T,
}

impl<T, E> std::fmt::Display for RawContent<T, E>
where   T: std::fmt::Display,
        E: std::fmt::Display {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::None => write!(f, "None"),
            Self::Error(e) => write!(f, "error={}", e),
            Self::Content(c) => write!(f, "content: data={}", c.data)
        }
    }
}

impl<T, E> Serialize for RawContent<T, E>
where T: Serialize,
      E: Serialize {
    fn raw_capacity(&self) -> usize {
        match self {
            Self::None => DATACONTENT_NONE_DEFAULT.raw_capacity(),
            Self::Error(e) => DATACONTENT_ERROR_DEFAULT.raw_capacity() + e.raw_capacity(),
            Self::Content(c) => DATACONTENT_CONTENT_DEFAULT.raw_capacity() + c.data.raw_capacity(),
        }
    }

    fn serialize<'a>(&self,
                     buf: &'a mut [u8]) -> NearResult<&'a mut [u8]> {
        match self {
            Self::None => {
                DATACONTENT_NONE_DEFAULT.serialize(buf)
            }
            Self::Error(e) => {
                let buf = DATACONTENT_ERROR_DEFAULT.serialize(buf)?;
                let buf = e.serialize(buf)?;

                Ok(buf)
            }
            Self::Content(c) => {
                let buf = DATACONTENT_CONTENT_DEFAULT.serialize(buf)?;
                let buf = c.data.serialize(buf)?;

                Ok(buf)
            }
        }
    }
}

impl<T, E> Deserialize for RawContent<T, E>
where T: Deserialize,
      E: Deserialize {
    fn deserialize<'de>(buf: &'de [u8]) -> NearResult<(Self, &'de [u8])> {
        let (flag, buf) = u8::deserialize(buf)?;

        match flag {
            DATACONTENT_NONE_DEFAULT => {
                Ok((Self::None, buf))
            }
            DATACONTENT_ERROR_DEFAULT => {
                let (error, buf) = E::deserialize(buf)?;

                Ok((Self::Error(error), buf))
            }
            DATACONTENT_CONTENT_DEFAULT => {
                let (data, buf) = T::deserialize(buf)?;

                Ok((Self::Content(RawData { data }), buf))
            }
            _ => {
                Err(NearError::new(ErrorCode::NEAR_ERROR_UNKNOWN, format!("[{flag}] can't identify RawContent flag")))
            }
        }
    }
}

#[derive(Clone, Default)]
pub struct RawObjectDescContent<T, E> {
    pub(crate) version: u8,
    pub(crate) data: RawContent<T, E>,
}

impl<T, E> RawObjectDescContent<T, E>
where T: std::default::Default,
      E: std::default::Default {

    #[inline]
    pub fn set_version(mut self, version: u8) -> Self {
        self.version = version;
        self
    }

    #[inline]
    pub fn set_with_data(mut self, data: T) -> Self {
        self.data = RawContent::Content(RawData{data});
        self
    }

    #[inline]
    pub fn set_with_error(mut self, error: E) -> Self {
        self.data = RawContent::Error(error);
        self
    }

    #[inline]
    pub fn version(&self) -> u8 {
        self.version
    }

    #[inline]
    pub fn data(&self) -> &RawContent<T, E> {
        &self.data
    }

    #[inline]
    pub fn take_data(&mut self) ->  RawContent<T, E> {
        let mut r = RawContent::<T, E>::default();
        std::mem::swap(&mut r, &mut self.data);
        r
    }

}

impl<T, E> std::fmt::Display for RawObjectDescContent<T, E> 
where   T: std::fmt::Display + Clone,
        E: std::fmt::Display + Clone {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "raw-desc: {{version: {}, data: {}}}", self.version(), self.data)
    }
}

impl<T, E> Serialize for RawObjectDescContent<T, E> 
where   T: Serialize,
        E: Serialize {
    fn raw_capacity(&self) -> usize {
        self.version.raw_capacity() + 
        self.data.raw_capacity()
    }

    fn serialize<'a>(&self,
                     buf: &'a mut [u8]) -> NearResult<&'a mut [u8]> {
        let buf = self.version.serialize(buf)?;
        let buf = self.data.serialize(buf)?;

        Ok(buf)
    }
}

impl<T, E> Deserialize for RawObjectDescContent<T, E> 
where   T: Deserialize,
        E: Deserialize {
    fn deserialize<'de>(buf: &'de [u8]) -> NearResult<(Self, &'de [u8])> {
        let (version, buf) = u8::deserialize(buf)?;
        let (data, buf) = RawContent::deserialize(buf)?;

        Ok((Self{
            version, data
        }, buf))
    }
}

pub type RawObjectGuardResult<T> = RawObjectGuard<T, NearError>;

#[derive(Clone)]
pub struct RawObjectGuard<T, E>(RawObject<T, E>)
where   T: Clone + std::fmt::Display + Serialize + Deserialize,
        E: Clone + std::fmt::Display + Serialize + Deserialize;

impl<T, E> std::ops::Deref for RawObjectGuard<T, E>
where   T: Clone + std::fmt::Display + Serialize + Deserialize,
        E: Clone + std::fmt::Display + Serialize + Deserialize{
    type Target = RawObject<T, E>;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl<T, E> AsMut<RawObject<T, E>> for RawObjectGuard<T, E>
where   T: Clone + std::fmt::Display + Serialize + Deserialize,
        E: Clone + std::fmt::Display + Serialize + Deserialize {

    fn as_mut(&mut self) -> &mut RawObject<T, E> {
        &mut self.0
    }

}

impl<T, E> Serialize for RawObjectGuard<T, E> 
where   T: Clone + std::fmt::Display + Serialize + Deserialize,
        E: Clone + std::fmt::Display + Serialize + Deserialize {
    fn raw_capacity(&self) -> usize {
        self.0.raw_capacity()
    }

    fn serialize<'a>(&self,
                     buf: &'a mut [u8]) -> NearResult<&'a mut [u8]> {
        self.0.serialize(buf)
    }
}

impl<T, E> Deserialize for RawObjectGuard<T, E>
where   T: Clone + std::fmt::Display + Serialize + Deserialize,
        E: Clone + std::fmt::Display + Serialize + Deserialize {
    fn deserialize<'de>(buf: &'de [u8]) -> NearResult<(Self, &'de [u8])> {
        let (r, buf) = RawObject::deserialize(buf)?;

        Ok((Self(r), buf))
    }
}

impl<T, E> From<RawObject<T, E>> for RawObjectGuard<T, E> 
where   T: Clone + std::fmt::Display + Serialize + Deserialize,
        E: Clone + std::fmt::Display + Serialize + Deserialize {
    fn from(value: RawObject<T, E>) -> Self {
        Self(value)
    }
}

impl<T, E> std::fmt::Display for RawObjectGuard<T, E>
where   T: Clone + std::fmt::Display + Serialize + Deserialize,
        E: Clone + std::fmt::Display + Serialize + Deserialize {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.0.fmt(f)
    }
}

// impl ItfTrait for NamedObject<RawObjectDescContent, RawObjectBodyContent> {}

// impl Serialize for RawObjectDescContent {
//     fn raw_capacity(&self) -> usize {
//         self.id.raw_capacity() +
//         (self.type_code as u8).raw_capacity() +
//         self.begin_time.raw_capacity()
//     }

//     fn serialize<'a>(&self,
//                      buf: &'a mut [u8]) -> NearResult<&'a mut [u8]> {
//         let buf = self.id.serialize(buf)?;
//         let buf = (self.type_code as u8).serialize(buf)?;
//         let buf = self.begin_time.serialize(buf)?;

//         Ok(buf)
//     }
// }

// impl Deserialize for RawObjectDescContent {
//     fn deserialize<'de>(buf: &'de [u8]) -> NearResult<(Self, &'de [u8])> {
//         let (id, buf) = u32::deserialize(buf)?;
//         let (type_code, buf) = u8::deserialize(buf)?;
//         let (begin_time, buf) = Timestamp::deserialize(buf)?;

//         Ok((Self{
//             id, 
//             type_code: RawObjectTypeCode::try_from(type_code)?,
//             begin_time,
//         },
//         buf))
//     }
    
// }

impl<T, E> ObjectDescTrait for RawObjectDescContent<T, E> 
where   T: Clone + std::fmt::Display,
        E: Clone + std::fmt::Display {
    fn object_type_code(&self) -> ObjectTypeCode {
        ObjectTypeCode::with_raw()
    }

    type OwnerObj = ObjectId;
    type AreaObj = Area;
    type AuthorObj = ObjectId;
    type PublicKeyObj = PublicKey;

}

#[derive(Clone)]
pub struct RawObjectBodyContent {  }

// impl RawObjectBodyContent {
//     #[inline]
//     pub fn name(&self) -> &str {
//         &self.name
//     }

//     #[inline]
//     pub fn status(&self) -> BrandStatus {
//         self.status
//     }

//     #[inline]
//     pub fn update_time(&self) -> Timestamp {
//         self.update_time
//     }

// }

impl Serialize for RawObjectBodyContent {
    fn raw_capacity(&self) -> usize {
        0
    }

    fn serialize<'a>(&self,
                     buf: &'a mut [u8]) -> NearResult<&'a mut [u8]> {
        Ok(buf)
    }
}

impl Deserialize for RawObjectBodyContent {
    fn deserialize<'de>(buf: &'de [u8]) -> NearResult<(Self, &'de [u8])> {
        Ok((Self{},
        buf))
    }
}

impl ObjectBodyTrait for RawObjectBodyContent { }

impl std::fmt::Display for RawObjectBodyContent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "raw-body: {{None}}")
    }
}

// #[derive(Default)]
// pub struct RawObjectBuilder {
//     id: u32,
//     status: BrandStatus,
//     type_code: RawObjectTypeCode,
//     name: String,
// }

// impl RawObjectBuilder {
//     pub fn set_id(mut self, id: u32) -> Self {
//         self.id = id;
//         self
//     }

//     pub fn set_status(mut self, status: BrandStatus) -> Self {
//         self.status = status;
//         self
//     }

//     pub fn set_type_code(mut self, type_code: RawObjectTypeCode) -> Self {
//         self.type_code = type_code;
//         self
//     }

//     pub fn set_name(mut self, name: &str) -> Self {
//         self.name = name.to_owned();
//         self
//     }
// }

// impl RawObjectBuilder {
//     pub fn build(self) -> NearResult<RawObjectObject> {

//         debug_assert!(self.type_code as u8 != RawObjectTypeCode::default() as u8);

//         let now = now();

//         ObjectBuilder::new(RawObjectDescContent {
//                                 id: self.id,
//                                 type_code: self.type_code,
//                                 begin_time: now,
//                             },
//                             RawObjectBodyContent {
//                             name: self.name,
//                             status: self.status,
//                             update_time: now,
//                             })
//             .build()
//     }
// }

// impl From<&RawObjectObject> for Brand_info {

//     fn from(value: &RawObjectObject) -> Self {
        
//         let mut brand = Brand_info::default();

//         // let fmt = "%Y-%m-%d %H:%M:%S";
//         // let date_str = std::time::Duration::from_micros(micros)

//         // brand.set_brand_id(value.desc().content().id());
//         // brand.set_brand_name(value.body().content().name().to_owned());
//         // brand.set_begin_time(v)

//         brand
//     }
// }

mod test {

    #[test]
    fn test_raw_str() {
        // use super::RawObjectDescContent;
        // use crate::raw_object::RawObjectBodyContent;

        // let desc = RawObjectDescContent {
        //     version: 1,
        //     format: 1u8,
        //     data: vec![1,2,3,4,5,6],
        // };
        // let obj = 
        //     super::RawObjectBuilder::new(desc, RawObjectBodyContent {})
        //         .build()
        //         .unwrap();

        // println!("{}", obj);
        // super::RawObjectBuilder::new()
    }
}
