#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_bm_desc_mnemonic_impl(
    port_: MessagePort,
    mnemonic: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "bm_desc_mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mnemonic = mnemonic.wire2api();
            move |task_callback| Ok(bm_desc_mnemonic(api_mnemonic))
        },
    )
}
fn wire_bm_desc_password_impl(port_: MessagePort, password: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_desc_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_password = password.wire2api();
            move |task_callback| Ok(bm_desc_password(api_password))
        },
    )
}
fn wire_bm_desc_test_network_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_desc_test_network",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(bm_desc_test_network()),
    )
}
fn wire_bm_desc_beta_network_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_desc_beta_network",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(bm_desc_beta_network()),
    )
}
fn wire_bm_desc_main_network_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_desc_main_network",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(bm_desc_main_network()),
    )
}
fn wire_bm_desc_device_type_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_desc_device_type",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(bm_desc_device_type()),
    )
}
fn wire_bm_desc_people_type_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_desc_people_type",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(bm_desc_people_type()),
    )
}
fn wire_bm_desc_build_impl(
    port_: MessagePort,
    user_name: impl Wire2Api<String> + UnwindSafe,
    user_data: impl Wire2Api<Vec<u8>> + UnwindSafe,
    output_dir: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<String>>(
        WrapInfo {
            debug_name: "bm_desc_build",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_user_name = user_name.wire2api();
            let api_user_data = user_data.wire2api();
            let api_output_dir = output_dir.wire2api();
            move |task_callback| Ok(bm_desc_build(api_user_name, api_user_data, api_output_dir))
        },
    )
}
fn wire_bm_search_impl(port_: MessagePort, bid: impl Wire2Api<Option<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>>(
        WrapInfo {
            debug_name: "bm_search",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bid = bid.wire2api();
            move |task_callback| Ok(bm_search(api_bid))
        },
    )
}
fn wire_bm_init_impl(port_: MessagePort, near_home: impl Wire2Api<Option<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_near_home = near_home.wire2api();
            move |task_callback| Ok(bm_init(api_near_home))
        },
    )
}
fn wire_bm_open_impl(
    port_: MessagePort,
    people: impl Wire2Api<String> + UnwindSafe,
    core: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "bm_open",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_people = people.wire2api();
            let api_core = core.wire2api();
            move |task_callback| Ok(bm_open(api_people, api_core))
        },
    )
}
fn wire_wait_online_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "wait_online",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(wait_online()),
    )
}
fn wire_get_last_error_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "get_last_error",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_last_error()),
    )
}
fn wire_bm_add_brand_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    brand_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "bm_add_brand",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_brand_name = brand_name.wire2api();
            move |task_callback| Ok(bm_add_brand(api_reqeust, api_brand_name))
        },
    )
}
fn wire_bm_query_all_brand_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "bm_query_all_brand",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            move |task_callback| Ok(bm_query_all_brand(api_reqeust))
        },
    )
}
fn wire_query_brand_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    brand_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "query_brand",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_brand_id = brand_id.wire2api();
            move |task_callback| Ok(query_brand(api_reqeust, api_brand_id))
        },
    )
}
fn wire_remove_brand_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    brand_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "remove_brand",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_brand_id = brand_id.wire2api();
            move |task_callback| Ok(remove_brand(api_reqeust, api_brand_id))
        },
    )
}
fn wire_add_major_product_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    product_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "add_major_product",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_product_name = product_name.wire2api();
            move |task_callback| Ok(add_major_product(api_reqeust, api_product_name))
        },
    )
}
fn wire_add_minor_product_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    major_product_id: impl Wire2Api<String> + UnwindSafe,
    product_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "add_minor_product",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_major_product_id = major_product_id.wire2api();
            let api_product_name = product_name.wire2api();
            move |task_callback| {
                Ok(add_minor_product(
                    api_reqeust,
                    api_major_product_id,
                    api_product_name,
                ))
            }
        },
    )
}
fn wire_remove_major_product_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    major_product_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "remove_major_product",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_major_product_id = major_product_id.wire2api();
            move |task_callback| Ok(remove_major_product(api_reqeust, api_major_product_id))
        },
    )
}
fn wire_remove_minor_product_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    major_product_id: impl Wire2Api<String> + UnwindSafe,
    product_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "remove_minor_product",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_major_product_id = major_product_id.wire2api();
            let api_product_id = product_id.wire2api();
            move |task_callback| {
                Ok(remove_minor_product(
                    api_reqeust,
                    api_major_product_id,
                    api_product_id,
                ))
            }
        },
    )
}
fn wire_query_product_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    product_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "query_product",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_product_id = product_id.wire2api();
            move |task_callback| Ok(query_product(api_reqeust, api_product_id))
        },
    )
}
fn wire_query_all_product_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "query_all_product",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            move |task_callback| Ok(query_all_product(api_reqeust))
        },
    )
}
fn wire_update_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    thing_id: impl Wire2Api<String> + UnwindSafe,
    thing_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "update_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_thing_id = thing_id.wire2api();
            let api_thing_name = thing_name.wire2api();
            move |task_callback| Ok(update_thing(api_reqeust, api_thing_id, api_thing_name))
        },
    )
}
fn wire_query_all_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    brand_id: impl Wire2Api<Option<String>> + UnwindSafe,
    product_id: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "query_all_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_brand_id = brand_id.wire2api();
            let api_product_id = product_id.wire2api();
            move |task_callback| Ok(query_all_thing(api_reqeust, api_brand_id, api_product_id))
        },
    )
}
fn wire_add_group_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_name: impl Wire2Api<String> + UnwindSafe,
    schedule_img_index: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "add_group",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_name = schedule_name.wire2api();
            let api_schedule_img_index = schedule_img_index.wire2api();
            move |task_callback| {
                Ok(add_group(
                    api_reqeust,
                    api_schedule_name,
                    api_schedule_img_index,
                ))
            }
        },
    )
}
fn wire_add_maual_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_name: impl Wire2Api<String> + UnwindSafe,
    schedule_img_index: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "add_maual_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_name = schedule_name.wire2api();
            let api_schedule_img_index = schedule_img_index.wire2api();
            move |task_callback| {
                Ok(add_maual_schedule(
                    api_reqeust,
                    api_schedule_name,
                    api_schedule_img_index,
                ))
            }
        },
    )
}
fn wire_add_timperiod_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_name: impl Wire2Api<String> + UnwindSafe,
    schedule_img_index: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "add_timperiod_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_name = schedule_name.wire2api();
            let api_schedule_img_index = schedule_img_index.wire2api();
            move |task_callback| {
                Ok(add_timperiod_schedule(
                    api_reqeust,
                    api_schedule_name,
                    api_schedule_img_index,
                ))
            }
        },
    )
}
fn wire_update_schedule_property_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
    thing_relation: impl Wire2Api<Vec<(String, Vec<(String, String)>)>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "update_schedule_property",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            let api_thing_relation = thing_relation.wire2api();
            move |task_callback| {
                Ok(update_schedule_property(
                    api_reqeust,
                    api_schedule_id,
                    api_thing_relation,
                ))
            }
        },
    )
}
fn wire_remove_schedule_property_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
    thing_relation: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "remove_schedule_property",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            let api_thing_relation = thing_relation.wire2api();
            move |task_callback| {
                Ok(remove_schedule_property(
                    api_reqeust,
                    api_schedule_id,
                    api_thing_relation,
                ))
            }
        },
    )
}
fn wire_update_timeperiod_schedule_info_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
    hour: impl Wire2Api<u32> + UnwindSafe,
    minute: impl Wire2Api<u32> + UnwindSafe,
    cycle_week_time: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "update_timeperiod_schedule_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            let api_hour = hour.wire2api();
            let api_minute = minute.wire2api();
            let api_cycle_week_time = cycle_week_time.wire2api();
            move |task_callback| {
                Ok(update_timeperiod_schedule_info(
                    api_reqeust,
                    api_schedule_id,
                    api_hour,
                    api_minute,
                    api_cycle_week_time,
                ))
            }
        },
    )
}
fn wire_update_schedule_info_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
    schedule_name: impl Wire2Api<String> + UnwindSafe,
    schedule_img_index: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "update_schedule_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            let api_schedule_name = schedule_name.wire2api();
            let api_schedule_img_index = schedule_img_index.wire2api();
            move |task_callback| {
                Ok(update_schedule_info(
                    api_reqeust,
                    api_schedule_id,
                    api_schedule_name,
                    api_schedule_img_index,
                ))
            }
        },
    )
}
fn wire_enable_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "enable_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            move |task_callback| Ok(enable_schedule(api_reqeust, api_schedule_id))
        },
    )
}
fn wire_disable_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "disable_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            move |task_callback| Ok(disable_schedule(api_reqeust, api_schedule_id))
        },
    )
}
fn wire_remove_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "remove_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            move |task_callback| Ok(remove_schedule(api_reqeust, api_schedule_id))
        },
    )
}
fn wire_query_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "query_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            move |task_callback| Ok(query_schedule(api_reqeust, api_schedule_id))
        },
    )
}
fn wire_query_all_simple_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "query_all_simple_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            move |task_callback| Ok(query_all_simple_schedule(api_reqeust))
        },
    )
}
fn wire_execute_schedule_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    schedule_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "execute_schedule",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_schedule_id = schedule_id.wire2api();
            move |task_callback| Ok(execute_schedule(api_reqeust, api_schedule_id))
        },
    )
}
fn wire_hci_search_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    brand_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "hci_search_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_brand_id = brand_id.wire2api();
            move |task_callback| Ok(hci_search_thing(api_reqeust, api_brand_id))
        },
    )
}
fn wire_hci_add_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    brand_id: impl Wire2Api<String> + UnwindSafe,
    major_product_id: impl Wire2Api<String> + UnwindSafe,
    minor_product_id: impl Wire2Api<String> + UnwindSafe,
    thing_mac: impl Wire2Api<String> + UnwindSafe,
    thing_name: impl Wire2Api<String> + UnwindSafe,
    thing_data: impl Wire2Api<Vec<(String, String)>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "hci_add_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_brand_id = brand_id.wire2api();
            let api_major_product_id = major_product_id.wire2api();
            let api_minor_product_id = minor_product_id.wire2api();
            let api_thing_mac = thing_mac.wire2api();
            let api_thing_name = thing_name.wire2api();
            let api_thing_data = thing_data.wire2api();
            move |task_callback| {
                Ok(hci_add_thing(
                    api_reqeust,
                    api_brand_id,
                    api_major_product_id,
                    api_minor_product_id,
                    api_thing_mac,
                    api_thing_name,
                    api_thing_data,
                ))
            }
        },
    )
}
fn wire_hci_remove_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    thing_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "hci_remove_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_thing_id = thing_id.wire2api();
            move |task_callback| Ok(hci_remove_thing(api_reqeust, api_thing_id))
        },
    )
}
fn wire_hci_pair_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    thing_id: impl Wire2Api<String> + UnwindSafe,
    operator_data: impl Wire2Api<Vec<(String, String)>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "hci_pair_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_thing_id = thing_id.wire2api();
            let api_operator_data = operator_data.wire2api();
            move |task_callback| Ok(hci_pair_thing(api_reqeust, api_thing_id, api_operator_data))
        },
    )
}
fn wire_hci_removepair_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    thing_id: impl Wire2Api<String> + UnwindSafe,
    operator_data: impl Wire2Api<Vec<(String, String)>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "hci_removepair_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_thing_id = thing_id.wire2api();
            let api_operator_data = operator_data.wire2api();
            move |task_callback| {
                Ok(hci_removepair_thing(
                    api_reqeust,
                    api_thing_id,
                    api_operator_data,
                ))
            }
        },
    )
}
fn wire_hci_query_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    thing_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "hci_query_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_thing_id = thing_id.wire2api();
            move |task_callback| Ok(hci_query_thing(api_reqeust, api_thing_id))
        },
    )
}
fn wire_hci_ctrl_thing_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    thing_id: impl Wire2Api<String> + UnwindSafe,
    operator_data: impl Wire2Api<Vec<(String, String)>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "hci_ctrl_thing",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_thing_id = thing_id.wire2api();
            let api_operator_data = operator_data.wire2api();
            move |task_callback| Ok(hci_ctrl_thing(api_reqeust, api_thing_id, api_operator_data))
        },
    )
}
fn wire_hci_get_task_result_impl(
    port_: MessagePort,
    reqeust: impl Wire2Api<ApiRequestCommon> + UnwindSafe,
    task_id: impl Wire2Api<u32> + UnwindSafe,
    thing_ids: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "hci_get_task_result",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_reqeust = reqeust.wire2api();
            let api_task_id = task_id.wire2api();
            let api_thing_ids = thing_ids.wire2api();
            move |task_callback| Ok(hci_get_task_result(api_reqeust, api_task_id, api_thing_ids))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
