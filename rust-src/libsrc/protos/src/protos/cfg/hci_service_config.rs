// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `hci_service_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Cfg)
pub struct Cfg {
    // message fields
    // @@protoc_insertion_point(field:Cfg.routines)
    pub routines: ::protobuf::MessageField<RoutinesConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:Cfg.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Cfg {
    fn default() -> &'a Cfg {
        <Cfg as ::protobuf::Message>::default_instance()
    }
}

impl Cfg {
    pub fn new() -> Cfg {
        ::std::default::Default::default()
    }

    // .RoutinesConfig routines = 4;

    pub fn routines(&self) -> &RoutinesConfig {
        self.routines.as_ref().unwrap_or_else(|| <RoutinesConfig as ::protobuf::Message>::default_instance())
    }

    pub fn clear_routines(&mut self) {
        self.routines.clear();
    }

    pub fn has_routines(&self) -> bool {
        self.routines.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routines(&mut self, v: RoutinesConfig) {
        self.routines = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routines(&mut self) -> &mut RoutinesConfig {
        self.routines.mut_or_insert_default()
    }

    // Take field
    pub fn take_routines(&mut self) -> RoutinesConfig {
        self.routines.take().unwrap_or_else(|| RoutinesConfig::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, RoutinesConfig>(
            "routines",
            |m: &Cfg| { &m.routines },
            |m: &mut Cfg| { &mut m.routines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Cfg>(
            "Cfg",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Cfg {
    const NAME: &'static str = "Cfg";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.routines)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.routines.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.routines.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Cfg {
        Cfg::new()
    }

    fn clear(&mut self) {
        self.routines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Cfg {
        static instance: Cfg = Cfg {
            routines: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Cfg {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Cfg").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Cfg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cfg {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CtrlThingTaskConfig)
pub struct CtrlThingTaskConfig {
    // message fields
    // @@protoc_insertion_point(field:CtrlThingTaskConfig.ctrl_interval)
    pub ctrl_interval: u64,
    // special fields
    // @@protoc_insertion_point(special_field:CtrlThingTaskConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CtrlThingTaskConfig {
    fn default() -> &'a CtrlThingTaskConfig {
        <CtrlThingTaskConfig as ::protobuf::Message>::default_instance()
    }
}

impl CtrlThingTaskConfig {
    pub fn new() -> CtrlThingTaskConfig {
        ::std::default::Default::default()
    }

    // uint64 ctrl_interval = 1;

    pub fn ctrl_interval(&self) -> u64 {
        self.ctrl_interval
    }

    pub fn clear_ctrl_interval(&mut self) {
        self.ctrl_interval = 0;
    }

    // Param is passed by value, moved
    pub fn set_ctrl_interval(&mut self, v: u64) {
        self.ctrl_interval = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ctrl_interval",
            |m: &CtrlThingTaskConfig| { &m.ctrl_interval },
            |m: &mut CtrlThingTaskConfig| { &mut m.ctrl_interval },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CtrlThingTaskConfig>(
            "CtrlThingTaskConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CtrlThingTaskConfig {
    const NAME: &'static str = "CtrlThingTaskConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ctrl_interval = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ctrl_interval != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.ctrl_interval);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ctrl_interval != 0 {
            os.write_uint64(1, self.ctrl_interval)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CtrlThingTaskConfig {
        CtrlThingTaskConfig::new()
    }

    fn clear(&mut self) {
        self.ctrl_interval = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CtrlThingTaskConfig {
        static instance: CtrlThingTaskConfig = CtrlThingTaskConfig {
            ctrl_interval: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CtrlThingTaskConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CtrlThingTaskConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CtrlThingTaskConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CtrlThingTaskConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:RoutinesConfig)
pub struct RoutinesConfig {
    // message fields
    // @@protoc_insertion_point(field:RoutinesConfig.ctrl_thing_task_config)
    pub ctrl_thing_task_config: ::protobuf::MessageField<CtrlThingTaskConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:RoutinesConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RoutinesConfig {
    fn default() -> &'a RoutinesConfig {
        <RoutinesConfig as ::protobuf::Message>::default_instance()
    }
}

impl RoutinesConfig {
    pub fn new() -> RoutinesConfig {
        ::std::default::Default::default()
    }

    // .CtrlThingTaskConfig ctrl_thing_task_config = 1;

    pub fn ctrl_thing_task_config(&self) -> &CtrlThingTaskConfig {
        self.ctrl_thing_task_config.as_ref().unwrap_or_else(|| <CtrlThingTaskConfig as ::protobuf::Message>::default_instance())
    }

    pub fn clear_ctrl_thing_task_config(&mut self) {
        self.ctrl_thing_task_config.clear();
    }

    pub fn has_ctrl_thing_task_config(&self) -> bool {
        self.ctrl_thing_task_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctrl_thing_task_config(&mut self, v: CtrlThingTaskConfig) {
        self.ctrl_thing_task_config = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ctrl_thing_task_config(&mut self) -> &mut CtrlThingTaskConfig {
        self.ctrl_thing_task_config.mut_or_insert_default()
    }

    // Take field
    pub fn take_ctrl_thing_task_config(&mut self) -> CtrlThingTaskConfig {
        self.ctrl_thing_task_config.take().unwrap_or_else(|| CtrlThingTaskConfig::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CtrlThingTaskConfig>(
            "ctrl_thing_task_config",
            |m: &RoutinesConfig| { &m.ctrl_thing_task_config },
            |m: &mut RoutinesConfig| { &mut m.ctrl_thing_task_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RoutinesConfig>(
            "RoutinesConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RoutinesConfig {
    const NAME: &'static str = "RoutinesConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ctrl_thing_task_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ctrl_thing_task_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ctrl_thing_task_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RoutinesConfig {
        RoutinesConfig::new()
    }

    fn clear(&mut self) {
        self.ctrl_thing_task_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RoutinesConfig {
        static instance: RoutinesConfig = RoutinesConfig {
            ctrl_thing_task_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RoutinesConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RoutinesConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RoutinesConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoutinesConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18hci_service_config.proto\"2\n\x03Cfg\x12+\n\x08routines\x18\x04\
    \x20\x01(\x0b2\x0f.RoutinesConfigR\x08routines\":\n\x13CtrlThingTaskConf\
    ig\x12#\n\rctrl_interval\x18\x01\x20\x01(\x04R\x0cctrlInterval\"[\n\x0eR\
    outinesConfig\x12I\n\x16ctrl_thing_task_config\x18\x01\x20\x01(\x0b2\x14\
    .CtrlThingTaskConfigR\x13ctrlThingTaskConfigb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Cfg::generated_message_descriptor_data());
            messages.push(CtrlThingTaskConfig::generated_message_descriptor_data());
            messages.push(RoutinesConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
