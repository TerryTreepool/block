// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `schedule.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_info)
pub struct Schedule_info {
    // message fields
    // @@protoc_insertion_point(field:schedule_info.schedule_id)
    pub schedule_id: ::std::string::String,
    // @@protoc_insertion_point(field:schedule_info.schedule_name)
    pub schedule_name: ::std::string::String,
    // @@protoc_insertion_point(field:schedule_info.thing_relation)
    pub thing_relation: ::std::vec::Vec<Schedule_relation_info>,
    // @@protoc_insertion_point(field:schedule_info.schedule_img_idx)
    pub schedule_img_idx: u32,
    // @@protoc_insertion_point(field:schedule_info.status)
    pub status: u32,
    // @@protoc_insertion_point(field:schedule_info.mode)
    pub mode: ::protobuf::EnumOrUnknown<Schedule_mode>,
    // @@protoc_insertion_point(field:schedule_info.timeperiod_mode)
    pub timeperiod_mode: ::protobuf::MessageField<Schedule_timeperiod_mode>,
    // @@protoc_insertion_point(field:schedule_info.condition_mode)
    pub condition_mode: ::protobuf::MessageField<Schedule_condition_mode>,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_info.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_info {
    fn default() -> &'a Schedule_info {
        <Schedule_info as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_info {
    pub fn new() -> Schedule_info {
        ::std::default::Default::default()
    }

    // string schedule_id = 1;

    pub fn schedule_id(&self) -> &str {
        &self.schedule_id
    }

    pub fn clear_schedule_id(&mut self) {
        self.schedule_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedule_id(&mut self, v: ::std::string::String) {
        self.schedule_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule_id(&mut self) -> &mut ::std::string::String {
        &mut self.schedule_id
    }

    // Take field
    pub fn take_schedule_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schedule_id, ::std::string::String::new())
    }

    // string schedule_name = 2;

    pub fn schedule_name(&self) -> &str {
        &self.schedule_name
    }

    pub fn clear_schedule_name(&mut self) {
        self.schedule_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedule_name(&mut self, v: ::std::string::String) {
        self.schedule_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule_name(&mut self) -> &mut ::std::string::String {
        &mut self.schedule_name
    }

    // Take field
    pub fn take_schedule_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schedule_name, ::std::string::String::new())
    }

    // repeated .schedule_relation_info thing_relation = 3;

    pub fn thing_relation(&self) -> &[Schedule_relation_info] {
        &self.thing_relation
    }

    pub fn clear_thing_relation(&mut self) {
        self.thing_relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_relation(&mut self, v: ::std::vec::Vec<Schedule_relation_info>) {
        self.thing_relation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_relation(&mut self) -> &mut ::std::vec::Vec<Schedule_relation_info> {
        &mut self.thing_relation
    }

    // Take field
    pub fn take_thing_relation(&mut self) -> ::std::vec::Vec<Schedule_relation_info> {
        ::std::mem::replace(&mut self.thing_relation, ::std::vec::Vec::new())
    }

    // uint32 schedule_img_idx = 4;

    pub fn schedule_img_idx(&self) -> u32 {
        self.schedule_img_idx
    }

    pub fn clear_schedule_img_idx(&mut self) {
        self.schedule_img_idx = 0;
    }

    // Param is passed by value, moved
    pub fn set_schedule_img_idx(&mut self, v: u32) {
        self.schedule_img_idx = v;
    }

    // uint32 status = 5;

    pub fn status(&self) -> u32 {
        self.status
    }

    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = v;
    }

    // .schedule_mode mode = 6;

    pub fn mode(&self) -> Schedule_mode {
        self.mode.enum_value_or_default()
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::protobuf::EnumOrUnknown::new(Schedule_mode::None);
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: Schedule_mode) {
        self.mode = ::protobuf::EnumOrUnknown::new(v);
    }

    // .schedule_timeperiod_mode timeperiod_mode = 7;

    pub fn timeperiod_mode(&self) -> &Schedule_timeperiod_mode {
        self.timeperiod_mode.as_ref().unwrap_or_else(|| <Schedule_timeperiod_mode as ::protobuf::Message>::default_instance())
    }

    pub fn clear_timeperiod_mode(&mut self) {
        self.timeperiod_mode.clear();
    }

    pub fn has_timeperiod_mode(&self) -> bool {
        self.timeperiod_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeperiod_mode(&mut self, v: Schedule_timeperiod_mode) {
        self.timeperiod_mode = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeperiod_mode(&mut self) -> &mut Schedule_timeperiod_mode {
        self.timeperiod_mode.mut_or_insert_default()
    }

    // Take field
    pub fn take_timeperiod_mode(&mut self) -> Schedule_timeperiod_mode {
        self.timeperiod_mode.take().unwrap_or_else(|| Schedule_timeperiod_mode::new())
    }

    // .schedule_condition_mode condition_mode = 8;

    pub fn condition_mode(&self) -> &Schedule_condition_mode {
        self.condition_mode.as_ref().unwrap_or_else(|| <Schedule_condition_mode as ::protobuf::Message>::default_instance())
    }

    pub fn clear_condition_mode(&mut self) {
        self.condition_mode.clear();
    }

    pub fn has_condition_mode(&self) -> bool {
        self.condition_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_condition_mode(&mut self, v: Schedule_condition_mode) {
        self.condition_mode = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_condition_mode(&mut self) -> &mut Schedule_condition_mode {
        self.condition_mode.mut_or_insert_default()
    }

    // Take field
    pub fn take_condition_mode(&mut self) -> Schedule_condition_mode {
        self.condition_mode.take().unwrap_or_else(|| Schedule_condition_mode::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &Schedule_info| { &m.schedule_id },
            |m: &mut Schedule_info| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_name",
            |m: &Schedule_info| { &m.schedule_name },
            |m: &mut Schedule_info| { &mut m.schedule_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "thing_relation",
            |m: &Schedule_info| { &m.thing_relation },
            |m: &mut Schedule_info| { &mut m.thing_relation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_img_idx",
            |m: &Schedule_info| { &m.schedule_img_idx },
            |m: &mut Schedule_info| { &mut m.schedule_img_idx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Schedule_info| { &m.status },
            |m: &mut Schedule_info| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mode",
            |m: &Schedule_info| { &m.mode },
            |m: &mut Schedule_info| { &mut m.mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Schedule_timeperiod_mode>(
            "timeperiod_mode",
            |m: &Schedule_info| { &m.timeperiod_mode },
            |m: &mut Schedule_info| { &mut m.timeperiod_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Schedule_condition_mode>(
            "condition_mode",
            |m: &Schedule_info| { &m.condition_mode },
            |m: &mut Schedule_info| { &mut m.condition_mode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_info>(
            "schedule_info",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_info {
    const NAME: &'static str = "schedule_info";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedule_id = is.read_string()?;
                },
                18 => {
                    self.schedule_name = is.read_string()?;
                },
                26 => {
                    self.thing_relation.push(is.read_message()?);
                },
                32 => {
                    self.schedule_img_idx = is.read_uint32()?;
                },
                40 => {
                    self.status = is.read_uint32()?;
                },
                48 => {
                    self.mode = is.read_enum_or_unknown()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timeperiod_mode)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.condition_mode)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.schedule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.schedule_id);
        }
        if !self.schedule_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.schedule_name);
        }
        for value in &self.thing_relation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.schedule_img_idx != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.schedule_img_idx);
        }
        if self.status != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.status);
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(Schedule_mode::None) {
            my_size += ::protobuf::rt::int32_size(6, self.mode.value());
        }
        if let Some(v) = self.timeperiod_mode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.condition_mode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.schedule_id.is_empty() {
            os.write_string(1, &self.schedule_id)?;
        }
        if !self.schedule_name.is_empty() {
            os.write_string(2, &self.schedule_name)?;
        }
        for v in &self.thing_relation {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.schedule_img_idx != 0 {
            os.write_uint32(4, self.schedule_img_idx)?;
        }
        if self.status != 0 {
            os.write_uint32(5, self.status)?;
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(Schedule_mode::None) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.mode))?;
        }
        if let Some(v) = self.timeperiod_mode.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.condition_mode.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_info {
        Schedule_info::new()
    }

    fn clear(&mut self) {
        self.schedule_id.clear();
        self.schedule_name.clear();
        self.thing_relation.clear();
        self.schedule_img_idx = 0;
        self.status = 0;
        self.mode = ::protobuf::EnumOrUnknown::new(Schedule_mode::None);
        self.timeperiod_mode.clear();
        self.condition_mode.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_info {
        static instance: Schedule_info = Schedule_info {
            schedule_id: ::std::string::String::new(),
            schedule_name: ::std::string::String::new(),
            thing_relation: ::std::vec::Vec::new(),
            schedule_img_idx: 0,
            status: 0,
            mode: ::protobuf::EnumOrUnknown::from_i32(0),
            timeperiod_mode: ::protobuf::MessageField::none(),
            condition_mode: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_info {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_info").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_info {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_cycle_time)
pub struct Schedule_cycle_time {
    // message fields
    // @@protoc_insertion_point(field:schedule_cycle_time.hour)
    pub hour: u32,
    // @@protoc_insertion_point(field:schedule_cycle_time.minute)
    pub minute: u32,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_cycle_time.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_cycle_time {
    fn default() -> &'a Schedule_cycle_time {
        <Schedule_cycle_time as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_cycle_time {
    pub fn new() -> Schedule_cycle_time {
        ::std::default::Default::default()
    }

    // uint32 hour = 1;

    pub fn hour(&self) -> u32 {
        self.hour
    }

    pub fn clear_hour(&mut self) {
        self.hour = 0;
    }

    // Param is passed by value, moved
    pub fn set_hour(&mut self, v: u32) {
        self.hour = v;
    }

    // uint32 minute = 2;

    pub fn minute(&self) -> u32 {
        self.minute
    }

    pub fn clear_minute(&mut self) {
        self.minute = 0;
    }

    // Param is passed by value, moved
    pub fn set_minute(&mut self, v: u32) {
        self.minute = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hour",
            |m: &Schedule_cycle_time| { &m.hour },
            |m: &mut Schedule_cycle_time| { &mut m.hour },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "minute",
            |m: &Schedule_cycle_time| { &m.minute },
            |m: &mut Schedule_cycle_time| { &mut m.minute },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_cycle_time>(
            "schedule_cycle_time",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_cycle_time {
    const NAME: &'static str = "schedule_cycle_time";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hour = is.read_uint32()?;
                },
                16 => {
                    self.minute = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.hour != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.hour);
        }
        if self.minute != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.minute);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.hour != 0 {
            os.write_uint32(1, self.hour)?;
        }
        if self.minute != 0 {
            os.write_uint32(2, self.minute)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_cycle_time {
        Schedule_cycle_time::new()
    }

    fn clear(&mut self) {
        self.hour = 0;
        self.minute = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_cycle_time {
        static instance: Schedule_cycle_time = Schedule_cycle_time {
            hour: 0,
            minute: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_cycle_time {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_cycle_time").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_cycle_time {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_cycle_time {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_timeperiod_mode)
pub struct Schedule_timeperiod_mode {
    // message fields
    // @@protoc_insertion_point(field:schedule_timeperiod_mode.time)
    pub time: ::protobuf::MessageField<Schedule_cycle_time>,
    // @@protoc_insertion_point(field:schedule_timeperiod_mode.cycle)
    pub cycle: u32,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_timeperiod_mode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_timeperiod_mode {
    fn default() -> &'a Schedule_timeperiod_mode {
        <Schedule_timeperiod_mode as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_timeperiod_mode {
    pub fn new() -> Schedule_timeperiod_mode {
        ::std::default::Default::default()
    }

    // .schedule_cycle_time time = 1;

    pub fn time(&self) -> &Schedule_cycle_time {
        self.time.as_ref().unwrap_or_else(|| <Schedule_cycle_time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: Schedule_cycle_time) {
        self.time = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut Schedule_cycle_time {
        self.time.mut_or_insert_default()
    }

    // Take field
    pub fn take_time(&mut self) -> Schedule_cycle_time {
        self.time.take().unwrap_or_else(|| Schedule_cycle_time::new())
    }

    // uint32 cycle = 2;

    pub fn cycle(&self) -> u32 {
        self.cycle
    }

    pub fn clear_cycle(&mut self) {
        self.cycle = 0;
    }

    // Param is passed by value, moved
    pub fn set_cycle(&mut self, v: u32) {
        self.cycle = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Schedule_cycle_time>(
            "time",
            |m: &Schedule_timeperiod_mode| { &m.time },
            |m: &mut Schedule_timeperiod_mode| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cycle",
            |m: &Schedule_timeperiod_mode| { &m.cycle },
            |m: &mut Schedule_timeperiod_mode| { &mut m.cycle },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_timeperiod_mode>(
            "schedule_timeperiod_mode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_timeperiod_mode {
    const NAME: &'static str = "schedule_timeperiod_mode";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                16 => {
                    self.cycle = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.cycle != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.cycle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.cycle != 0 {
            os.write_uint32(2, self.cycle)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_timeperiod_mode {
        Schedule_timeperiod_mode::new()
    }

    fn clear(&mut self) {
        self.time.clear();
        self.cycle = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_timeperiod_mode {
        static instance: Schedule_timeperiod_mode = Schedule_timeperiod_mode {
            time: ::protobuf::MessageField::none(),
            cycle: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_timeperiod_mode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_timeperiod_mode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_timeperiod_mode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_timeperiod_mode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `schedule_timeperiod_mode`
pub mod schedule_timeperiod_mode {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:schedule_timeperiod_mode.schedule_cycle_week)
    pub enum Schedule_cycle_week {
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Zero)
        Zero = 0,
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Mon)
        Mon = 1,
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Tues)
        Tues = 2,
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Wed)
        Wed = 4,
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Thur)
        Thur = 8,
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Fri)
        Fri = 16,
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Sat)
        Sat = 32,
        // @@protoc_insertion_point(enum_value:schedule_timeperiod_mode.schedule_cycle_week.Sun)
        Sun = 64,
    }

    impl ::protobuf::Enum for Schedule_cycle_week {
        const NAME: &'static str = "schedule_cycle_week";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Schedule_cycle_week> {
            match value {
                0 => ::std::option::Option::Some(Schedule_cycle_week::Zero),
                1 => ::std::option::Option::Some(Schedule_cycle_week::Mon),
                2 => ::std::option::Option::Some(Schedule_cycle_week::Tues),
                4 => ::std::option::Option::Some(Schedule_cycle_week::Wed),
                8 => ::std::option::Option::Some(Schedule_cycle_week::Thur),
                16 => ::std::option::Option::Some(Schedule_cycle_week::Fri),
                32 => ::std::option::Option::Some(Schedule_cycle_week::Sat),
                64 => ::std::option::Option::Some(Schedule_cycle_week::Sun),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Schedule_cycle_week] = &[
            Schedule_cycle_week::Zero,
            Schedule_cycle_week::Mon,
            Schedule_cycle_week::Tues,
            Schedule_cycle_week::Wed,
            Schedule_cycle_week::Thur,
            Schedule_cycle_week::Fri,
            Schedule_cycle_week::Sat,
            Schedule_cycle_week::Sun,
        ];
    }

    impl ::protobuf::EnumFull for Schedule_cycle_week {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("schedule_timeperiod_mode.schedule_cycle_week").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Schedule_cycle_week::Zero => 0,
                Schedule_cycle_week::Mon => 1,
                Schedule_cycle_week::Tues => 2,
                Schedule_cycle_week::Wed => 3,
                Schedule_cycle_week::Thur => 4,
                Schedule_cycle_week::Fri => 5,
                Schedule_cycle_week::Sat => 6,
                Schedule_cycle_week::Sun => 7,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Schedule_cycle_week {
        fn default() -> Self {
            Schedule_cycle_week::Zero
        }
    }

    impl Schedule_cycle_week {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Schedule_cycle_week>("schedule_timeperiod_mode.schedule_cycle_week")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_condition_mode)
pub struct Schedule_condition_mode {
    // special fields
    // @@protoc_insertion_point(special_field:schedule_condition_mode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_condition_mode {
    fn default() -> &'a Schedule_condition_mode {
        <Schedule_condition_mode as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_condition_mode {
    pub fn new() -> Schedule_condition_mode {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_condition_mode>(
            "schedule_condition_mode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_condition_mode {
    const NAME: &'static str = "schedule_condition_mode";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_condition_mode {
        Schedule_condition_mode::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_condition_mode {
        static instance: Schedule_condition_mode = Schedule_condition_mode {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_condition_mode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_condition_mode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_condition_mode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_condition_mode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_relation_info)
pub struct Schedule_relation_info {
    // message fields
    // @@protoc_insertion_point(field:schedule_relation_info.thing_id)
    pub thing_id: ::std::string::String,
    // @@protoc_insertion_point(field:schedule_relation_info.thing_data_property)
    pub thing_data_property: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_relation_info.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_relation_info {
    fn default() -> &'a Schedule_relation_info {
        <Schedule_relation_info as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_relation_info {
    pub fn new() -> Schedule_relation_info {
        ::std::default::Default::default()
    }

    // string thing_id = 1;

    pub fn thing_id(&self) -> &str {
        &self.thing_id
    }

    pub fn clear_thing_id(&mut self) {
        self.thing_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_id(&mut self, v: ::std::string::String) {
        self.thing_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_id(&mut self) -> &mut ::std::string::String {
        &mut self.thing_id
    }

    // Take field
    pub fn take_thing_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_id, ::std::string::String::new())
    }

    // repeated .schedule_relation_info.ThingDataPropertyEntry thing_data_property = 6;

    pub fn thing_data_property(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.thing_data_property
    }

    pub fn clear_thing_data_property(&mut self) {
        self.thing_data_property.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_data_property(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.thing_data_property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_data_property(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.thing_data_property
    }

    // Take field
    pub fn take_thing_data_property(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.thing_data_property, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_id",
            |m: &Schedule_relation_info| { &m.thing_id },
            |m: &mut Schedule_relation_info| { &mut m.thing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "thing_data_property",
            |m: &Schedule_relation_info| { &m.thing_data_property },
            |m: &mut Schedule_relation_info| { &mut m.thing_data_property },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_relation_info>(
            "schedule_relation_info",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_relation_info {
    const NAME: &'static str = "schedule_relation_info";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.thing_id = is.read_string()?;
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.thing_data_property.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.thing_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.thing_id);
        }
        for (k, v) in &self.thing_data_property {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.thing_id.is_empty() {
            os.write_string(1, &self.thing_id)?;
        }
        for (k, v) in &self.thing_data_property {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_relation_info {
        Schedule_relation_info::new()
    }

    fn clear(&mut self) {
        self.thing_id.clear();
        self.thing_data_property.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_relation_info {
        static instance: ::protobuf::rt::Lazy<Schedule_relation_info> = ::protobuf::rt::Lazy::new();
        instance.get(Schedule_relation_info::new)
    }
}

impl ::protobuf::MessageFull for Schedule_relation_info {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_relation_info").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_relation_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_relation_info {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_relation_list)
pub struct Schedule_relation_list {
    // message fields
    // @@protoc_insertion_point(field:schedule_relation_list.thing_relation)
    pub thing_relation: ::std::vec::Vec<Schedule_relation_info>,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_relation_list.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_relation_list {
    fn default() -> &'a Schedule_relation_list {
        <Schedule_relation_list as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_relation_list {
    pub fn new() -> Schedule_relation_list {
        ::std::default::Default::default()
    }

    // repeated .schedule_relation_info thing_relation = 1;

    pub fn thing_relation(&self) -> &[Schedule_relation_info] {
        &self.thing_relation
    }

    pub fn clear_thing_relation(&mut self) {
        self.thing_relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_relation(&mut self, v: ::std::vec::Vec<Schedule_relation_info>) {
        self.thing_relation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_relation(&mut self) -> &mut ::std::vec::Vec<Schedule_relation_info> {
        &mut self.thing_relation
    }

    // Take field
    pub fn take_thing_relation(&mut self) -> ::std::vec::Vec<Schedule_relation_info> {
        ::std::mem::replace(&mut self.thing_relation, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "thing_relation",
            |m: &Schedule_relation_list| { &m.thing_relation },
            |m: &mut Schedule_relation_list| { &mut m.thing_relation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_relation_list>(
            "schedule_relation_list",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_relation_list {
    const NAME: &'static str = "schedule_relation_list";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.thing_relation.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.thing_relation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.thing_relation {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_relation_list {
        Schedule_relation_list::new()
    }

    fn clear(&mut self) {
        self.thing_relation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_relation_list {
        static instance: Schedule_relation_list = Schedule_relation_list {
            thing_relation: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_relation_list {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_relation_list").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_relation_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_relation_list {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_relation_list_update)
pub struct Schedule_relation_list_update {
    // message fields
    // @@protoc_insertion_point(field:schedule_relation_list_update.schedule_id)
    pub schedule_id: ::std::string::String,
    // @@protoc_insertion_point(field:schedule_relation_list_update.op)
    pub op: ::protobuf::EnumOrUnknown<schedule_relation_list_update::Schedule_relation_list_op>,
    // @@protoc_insertion_point(field:schedule_relation_list_update.relations)
    pub relations: ::protobuf::MessageField<Schedule_relation_list>,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_relation_list_update.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_relation_list_update {
    fn default() -> &'a Schedule_relation_list_update {
        <Schedule_relation_list_update as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_relation_list_update {
    pub fn new() -> Schedule_relation_list_update {
        ::std::default::Default::default()
    }

    // string schedule_id = 1;

    pub fn schedule_id(&self) -> &str {
        &self.schedule_id
    }

    pub fn clear_schedule_id(&mut self) {
        self.schedule_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedule_id(&mut self, v: ::std::string::String) {
        self.schedule_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule_id(&mut self) -> &mut ::std::string::String {
        &mut self.schedule_id
    }

    // Take field
    pub fn take_schedule_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schedule_id, ::std::string::String::new())
    }

    // .schedule_relation_list_update.schedule_relation_list_op op = 2;

    pub fn op(&self) -> schedule_relation_list_update::Schedule_relation_list_op {
        self.op.enum_value_or_default()
    }

    pub fn clear_op(&mut self) {
        self.op = ::protobuf::EnumOrUnknown::new(schedule_relation_list_update::Schedule_relation_list_op::none);
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: schedule_relation_list_update::Schedule_relation_list_op) {
        self.op = ::protobuf::EnumOrUnknown::new(v);
    }

    // .schedule_relation_list relations = 3;

    pub fn relations(&self) -> &Schedule_relation_list {
        self.relations.as_ref().unwrap_or_else(|| <Schedule_relation_list as ::protobuf::Message>::default_instance())
    }

    pub fn clear_relations(&mut self) {
        self.relations.clear();
    }

    pub fn has_relations(&self) -> bool {
        self.relations.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relations(&mut self, v: Schedule_relation_list) {
        self.relations = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relations(&mut self) -> &mut Schedule_relation_list {
        self.relations.mut_or_insert_default()
    }

    // Take field
    pub fn take_relations(&mut self) -> Schedule_relation_list {
        self.relations.take().unwrap_or_else(|| Schedule_relation_list::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &Schedule_relation_list_update| { &m.schedule_id },
            |m: &mut Schedule_relation_list_update| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "op",
            |m: &Schedule_relation_list_update| { &m.op },
            |m: &mut Schedule_relation_list_update| { &mut m.op },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Schedule_relation_list>(
            "relations",
            |m: &Schedule_relation_list_update| { &m.relations },
            |m: &mut Schedule_relation_list_update| { &mut m.relations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_relation_list_update>(
            "schedule_relation_list_update",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_relation_list_update {
    const NAME: &'static str = "schedule_relation_list_update";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedule_id = is.read_string()?;
                },
                16 => {
                    self.op = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.relations)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.schedule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.schedule_id);
        }
        if self.op != ::protobuf::EnumOrUnknown::new(schedule_relation_list_update::Schedule_relation_list_op::none) {
            my_size += ::protobuf::rt::int32_size(2, self.op.value());
        }
        if let Some(v) = self.relations.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.schedule_id.is_empty() {
            os.write_string(1, &self.schedule_id)?;
        }
        if self.op != ::protobuf::EnumOrUnknown::new(schedule_relation_list_update::Schedule_relation_list_op::none) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.op))?;
        }
        if let Some(v) = self.relations.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_relation_list_update {
        Schedule_relation_list_update::new()
    }

    fn clear(&mut self) {
        self.schedule_id.clear();
        self.op = ::protobuf::EnumOrUnknown::new(schedule_relation_list_update::Schedule_relation_list_op::none);
        self.relations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_relation_list_update {
        static instance: Schedule_relation_list_update = Schedule_relation_list_update {
            schedule_id: ::std::string::String::new(),
            op: ::protobuf::EnumOrUnknown::from_i32(0),
            relations: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_relation_list_update {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_relation_list_update").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_relation_list_update {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_relation_list_update {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `schedule_relation_list_update`
pub mod schedule_relation_list_update {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:schedule_relation_list_update.schedule_relation_list_op)
    pub enum Schedule_relation_list_op {
        // @@protoc_insertion_point(enum_value:schedule_relation_list_update.schedule_relation_list_op.none)
        none = 0,
        // @@protoc_insertion_point(enum_value:schedule_relation_list_update.schedule_relation_list_op.update)
        update = 1,
        // @@protoc_insertion_point(enum_value:schedule_relation_list_update.schedule_relation_list_op.remove)
        remove = 2,
    }

    impl ::protobuf::Enum for Schedule_relation_list_op {
        const NAME: &'static str = "schedule_relation_list_op";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Schedule_relation_list_op> {
            match value {
                0 => ::std::option::Option::Some(Schedule_relation_list_op::none),
                1 => ::std::option::Option::Some(Schedule_relation_list_op::update),
                2 => ::std::option::Option::Some(Schedule_relation_list_op::remove),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Schedule_relation_list_op] = &[
            Schedule_relation_list_op::none,
            Schedule_relation_list_op::update,
            Schedule_relation_list_op::remove,
        ];
    }

    impl ::protobuf::EnumFull for Schedule_relation_list_op {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("schedule_relation_list_update.schedule_relation_list_op").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Schedule_relation_list_op {
        fn default() -> Self {
            Schedule_relation_list_op::none
        }
    }

    impl Schedule_relation_list_op {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Schedule_relation_list_op>("schedule_relation_list_update.schedule_relation_list_op")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_list)
pub struct Schedule_list {
    // message fields
    // @@protoc_insertion_point(field:schedule_list.schedules)
    pub schedules: ::std::vec::Vec<Schedule_info>,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_list.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_list {
    fn default() -> &'a Schedule_list {
        <Schedule_list as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_list {
    pub fn new() -> Schedule_list {
        ::std::default::Default::default()
    }

    // repeated .schedule_info schedules = 1;

    pub fn schedules(&self) -> &[Schedule_info] {
        &self.schedules
    }

    pub fn clear_schedules(&mut self) {
        self.schedules.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedules(&mut self, v: ::std::vec::Vec<Schedule_info>) {
        self.schedules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_schedules(&mut self) -> &mut ::std::vec::Vec<Schedule_info> {
        &mut self.schedules
    }

    // Take field
    pub fn take_schedules(&mut self) -> ::std::vec::Vec<Schedule_info> {
        ::std::mem::replace(&mut self.schedules, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "schedules",
            |m: &Schedule_list| { &m.schedules },
            |m: &mut Schedule_list| { &mut m.schedules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_list>(
            "schedule_list",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_list {
    const NAME: &'static str = "schedule_list";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.schedules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.schedules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_list {
        Schedule_list::new()
    }

    fn clear(&mut self) {
        self.schedules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_list {
        static instance: Schedule_list = Schedule_list {
            schedules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_list {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_list").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_list {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schedule_add)
pub struct Schedule_add {
    // message fields
    // @@protoc_insertion_point(field:schedule_add.schedule_name)
    pub schedule_name: ::std::string::String,
    // @@protoc_insertion_point(field:schedule_add.thing_relation)
    pub thing_relation: ::std::vec::Vec<Schedule_relation_info>,
    // @@protoc_insertion_point(field:schedule_add.schedule_img_idx)
    pub schedule_img_idx: u32,
    // @@protoc_insertion_point(field:schedule_add.mode)
    pub mode: ::protobuf::EnumOrUnknown<Schedule_mode>,
    // special fields
    // @@protoc_insertion_point(special_field:schedule_add.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Schedule_add {
    fn default() -> &'a Schedule_add {
        <Schedule_add as ::protobuf::Message>::default_instance()
    }
}

impl Schedule_add {
    pub fn new() -> Schedule_add {
        ::std::default::Default::default()
    }

    // string schedule_name = 1;

    pub fn schedule_name(&self) -> &str {
        &self.schedule_name
    }

    pub fn clear_schedule_name(&mut self) {
        self.schedule_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedule_name(&mut self, v: ::std::string::String) {
        self.schedule_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule_name(&mut self) -> &mut ::std::string::String {
        &mut self.schedule_name
    }

    // Take field
    pub fn take_schedule_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schedule_name, ::std::string::String::new())
    }

    // repeated .schedule_relation_info thing_relation = 2;

    pub fn thing_relation(&self) -> &[Schedule_relation_info] {
        &self.thing_relation
    }

    pub fn clear_thing_relation(&mut self) {
        self.thing_relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_relation(&mut self, v: ::std::vec::Vec<Schedule_relation_info>) {
        self.thing_relation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_relation(&mut self) -> &mut ::std::vec::Vec<Schedule_relation_info> {
        &mut self.thing_relation
    }

    // Take field
    pub fn take_thing_relation(&mut self) -> ::std::vec::Vec<Schedule_relation_info> {
        ::std::mem::replace(&mut self.thing_relation, ::std::vec::Vec::new())
    }

    // uint32 schedule_img_idx = 3;

    pub fn schedule_img_idx(&self) -> u32 {
        self.schedule_img_idx
    }

    pub fn clear_schedule_img_idx(&mut self) {
        self.schedule_img_idx = 0;
    }

    // Param is passed by value, moved
    pub fn set_schedule_img_idx(&mut self, v: u32) {
        self.schedule_img_idx = v;
    }

    // .schedule_mode mode = 4;

    pub fn mode(&self) -> Schedule_mode {
        self.mode.enum_value_or_default()
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::protobuf::EnumOrUnknown::new(Schedule_mode::None);
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: Schedule_mode) {
        self.mode = ::protobuf::EnumOrUnknown::new(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_name",
            |m: &Schedule_add| { &m.schedule_name },
            |m: &mut Schedule_add| { &mut m.schedule_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "thing_relation",
            |m: &Schedule_add| { &m.thing_relation },
            |m: &mut Schedule_add| { &mut m.thing_relation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_img_idx",
            |m: &Schedule_add| { &m.schedule_img_idx },
            |m: &mut Schedule_add| { &mut m.schedule_img_idx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mode",
            |m: &Schedule_add| { &m.mode },
            |m: &mut Schedule_add| { &mut m.mode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Schedule_add>(
            "schedule_add",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Schedule_add {
    const NAME: &'static str = "schedule_add";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedule_name = is.read_string()?;
                },
                18 => {
                    self.thing_relation.push(is.read_message()?);
                },
                24 => {
                    self.schedule_img_idx = is.read_uint32()?;
                },
                32 => {
                    self.mode = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.schedule_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.schedule_name);
        }
        for value in &self.thing_relation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.schedule_img_idx != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.schedule_img_idx);
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(Schedule_mode::None) {
            my_size += ::protobuf::rt::int32_size(4, self.mode.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.schedule_name.is_empty() {
            os.write_string(1, &self.schedule_name)?;
        }
        for v in &self.thing_relation {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.schedule_img_idx != 0 {
            os.write_uint32(3, self.schedule_img_idx)?;
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(Schedule_mode::None) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.mode))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Schedule_add {
        Schedule_add::new()
    }

    fn clear(&mut self) {
        self.schedule_name.clear();
        self.thing_relation.clear();
        self.schedule_img_idx = 0;
        self.mode = ::protobuf::EnumOrUnknown::new(Schedule_mode::None);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Schedule_add {
        static instance: Schedule_add = Schedule_add {
            schedule_name: ::std::string::String::new(),
            thing_relation: ::std::vec::Vec::new(),
            schedule_img_idx: 0,
            mode: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Schedule_add {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("schedule_add").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Schedule_add {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule_add {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:thing_insert_group)
pub struct Thing_insert_group {
    // message fields
    // @@protoc_insertion_point(field:thing_insert_group.schedule_id)
    pub schedule_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_insert_group.thing_relation)
    pub thing_relation: ::std::vec::Vec<Schedule_relation_info>,
    // special fields
    // @@protoc_insertion_point(special_field:thing_insert_group.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Thing_insert_group {
    fn default() -> &'a Thing_insert_group {
        <Thing_insert_group as ::protobuf::Message>::default_instance()
    }
}

impl Thing_insert_group {
    pub fn new() -> Thing_insert_group {
        ::std::default::Default::default()
    }

    // string schedule_id = 1;

    pub fn schedule_id(&self) -> &str {
        &self.schedule_id
    }

    pub fn clear_schedule_id(&mut self) {
        self.schedule_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedule_id(&mut self, v: ::std::string::String) {
        self.schedule_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule_id(&mut self) -> &mut ::std::string::String {
        &mut self.schedule_id
    }

    // Take field
    pub fn take_schedule_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schedule_id, ::std::string::String::new())
    }

    // repeated .schedule_relation_info thing_relation = 2;

    pub fn thing_relation(&self) -> &[Schedule_relation_info] {
        &self.thing_relation
    }

    pub fn clear_thing_relation(&mut self) {
        self.thing_relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_relation(&mut self, v: ::std::vec::Vec<Schedule_relation_info>) {
        self.thing_relation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_relation(&mut self) -> &mut ::std::vec::Vec<Schedule_relation_info> {
        &mut self.thing_relation
    }

    // Take field
    pub fn take_thing_relation(&mut self) -> ::std::vec::Vec<Schedule_relation_info> {
        ::std::mem::replace(&mut self.thing_relation, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &Thing_insert_group| { &m.schedule_id },
            |m: &mut Thing_insert_group| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "thing_relation",
            |m: &Thing_insert_group| { &m.thing_relation },
            |m: &mut Thing_insert_group| { &mut m.thing_relation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Thing_insert_group>(
            "thing_insert_group",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Thing_insert_group {
    const NAME: &'static str = "thing_insert_group";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedule_id = is.read_string()?;
                },
                18 => {
                    self.thing_relation.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.schedule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.schedule_id);
        }
        for value in &self.thing_relation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.schedule_id.is_empty() {
            os.write_string(1, &self.schedule_id)?;
        }
        for v in &self.thing_relation {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Thing_insert_group {
        Thing_insert_group::new()
    }

    fn clear(&mut self) {
        self.schedule_id.clear();
        self.thing_relation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Thing_insert_group {
        static instance: Thing_insert_group = Thing_insert_group {
            schedule_id: ::std::string::String::new(),
            thing_relation: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Thing_insert_group {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("thing_insert_group").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Thing_insert_group {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing_insert_group {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:thing_remove_group)
pub struct Thing_remove_group {
    // message fields
    // @@protoc_insertion_point(field:thing_remove_group.schedule_id)
    pub schedule_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_remove_group.thing_id)
    pub thing_id: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:thing_remove_group.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Thing_remove_group {
    fn default() -> &'a Thing_remove_group {
        <Thing_remove_group as ::protobuf::Message>::default_instance()
    }
}

impl Thing_remove_group {
    pub fn new() -> Thing_remove_group {
        ::std::default::Default::default()
    }

    // string schedule_id = 1;

    pub fn schedule_id(&self) -> &str {
        &self.schedule_id
    }

    pub fn clear_schedule_id(&mut self) {
        self.schedule_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedule_id(&mut self, v: ::std::string::String) {
        self.schedule_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule_id(&mut self) -> &mut ::std::string::String {
        &mut self.schedule_id
    }

    // Take field
    pub fn take_schedule_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schedule_id, ::std::string::String::new())
    }

    // repeated string thing_id = 2;

    pub fn thing_id(&self) -> &[::std::string::String] {
        &self.thing_id
    }

    pub fn clear_thing_id(&mut self) {
        self.thing_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_id(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.thing_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_id(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.thing_id
    }

    // Take field
    pub fn take_thing_id(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.thing_id, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &Thing_remove_group| { &m.schedule_id },
            |m: &mut Thing_remove_group| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "thing_id",
            |m: &Thing_remove_group| { &m.thing_id },
            |m: &mut Thing_remove_group| { &mut m.thing_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Thing_remove_group>(
            "thing_remove_group",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Thing_remove_group {
    const NAME: &'static str = "thing_remove_group";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedule_id = is.read_string()?;
                },
                18 => {
                    self.thing_id.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.schedule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.schedule_id);
        }
        for value in &self.thing_id {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.schedule_id.is_empty() {
            os.write_string(1, &self.schedule_id)?;
        }
        for v in &self.thing_id {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Thing_remove_group {
        Thing_remove_group::new()
    }

    fn clear(&mut self) {
        self.schedule_id.clear();
        self.thing_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Thing_remove_group {
        static instance: Thing_remove_group = Thing_remove_group {
            schedule_id: ::std::string::String::new(),
            thing_id: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Thing_remove_group {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("thing_remove_group").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Thing_remove_group {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing_remove_group {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:schedule_mode)
pub enum Schedule_mode {
    // @@protoc_insertion_point(enum_value:schedule_mode.None)
    None = 0,
    // @@protoc_insertion_point(enum_value:schedule_mode.Maual)
    Maual = 1,
    // @@protoc_insertion_point(enum_value:schedule_mode.TimePeriod)
    TimePeriod = 2,
    // @@protoc_insertion_point(enum_value:schedule_mode.Condition)
    Condition = 3,
}

impl ::protobuf::Enum for Schedule_mode {
    const NAME: &'static str = "schedule_mode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Schedule_mode> {
        match value {
            0 => ::std::option::Option::Some(Schedule_mode::None),
            1 => ::std::option::Option::Some(Schedule_mode::Maual),
            2 => ::std::option::Option::Some(Schedule_mode::TimePeriod),
            3 => ::std::option::Option::Some(Schedule_mode::Condition),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Schedule_mode] = &[
        Schedule_mode::None,
        Schedule_mode::Maual,
        Schedule_mode::TimePeriod,
        Schedule_mode::Condition,
    ];
}

impl ::protobuf::EnumFull for Schedule_mode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("schedule_mode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Schedule_mode {
    fn default() -> Self {
        Schedule_mode::None
    }
}

impl Schedule_mode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Schedule_mode>("schedule_mode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eschedule.proto\"\x80\x03\n\rschedule_info\x12\x1f\n\x0bschedule_id\
    \x18\x01\x20\x01(\tR\nscheduleId\x12#\n\rschedule_name\x18\x02\x20\x01(\
    \tR\x0cscheduleName\x12>\n\x0ething_relation\x18\x03\x20\x03(\x0b2\x17.s\
    chedule_relation_infoR\rthingRelation\x12(\n\x10schedule_img_idx\x18\x04\
    \x20\x01(\rR\x0escheduleImgIdx\x12\x16\n\x06status\x18\x05\x20\x01(\rR\
    \x06status\x12\"\n\x04mode\x18\x06\x20\x01(\x0e2\x0e.schedule_modeR\x04m\
    ode\x12B\n\x0ftimeperiod_mode\x18\x07\x20\x01(\x0b2\x19.schedule_timeper\
    iod_modeR\x0etimeperiodMode\x12?\n\x0econdition_mode\x18\x08\x20\x01(\
    \x0b2\x18.schedule_condition_modeR\rconditionMode\"A\n\x13schedule_cycle\
    _time\x12\x12\n\x04hour\x18\x01\x20\x01(\rR\x04hour\x12\x16\n\x06minute\
    \x18\x02\x20\x01(\rR\x06minute\"\xbc\x01\n\x18schedule_timeperiod_mode\
    \x12(\n\x04time\x18\x01\x20\x01(\x0b2\x14.schedule_cycle_timeR\x04time\
    \x12\x14\n\x05cycle\x18\x02\x20\x01(\rR\x05cycle\"`\n\x13schedule_cycle_\
    week\x12\x08\n\x04Zero\x10\0\x12\x07\n\x03Mon\x10\x01\x12\x08\n\x04Tues\
    \x10\x02\x12\x07\n\x03Wed\x10\x04\x12\x08\n\x04Thur\x10\x08\x12\x07\n\
    \x03Fri\x10\x10\x12\x07\n\x03Sat\x10\x20\x12\x07\n\x03Sun\x10@\"\x19\n\
    \x17schedule_condition_mode\"\xd9\x01\n\x16schedule_relation_info\x12\
    \x19\n\x08thing_id\x18\x01\x20\x01(\tR\x07thingId\x12^\n\x13thing_data_p\
    roperty\x18\x06\x20\x03(\x0b2..schedule_relation_info.ThingDataPropertyE\
    ntryR\x11thingDataProperty\x1aD\n\x16ThingDataPropertyEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"X\n\x16schedule_relation_list\x12>\n\x0ething_rela\
    tion\x18\x01\x20\x03(\x0b2\x17.schedule_relation_infoR\rthingRelation\"\
    \x80\x02\n\x1dschedule_relation_list_update\x12\x1f\n\x0bschedule_id\x18\
    \x01\x20\x01(\tR\nscheduleId\x12H\n\x02op\x18\x02\x20\x01(\x0e28.schedul\
    e_relation_list_update.schedule_relation_list_opR\x02op\x125\n\trelation\
    s\x18\x03\x20\x01(\x0b2\x17.schedule_relation_listR\trelations\"=\n\x19s\
    chedule_relation_list_op\x12\x08\n\x04none\x10\0\x12\n\n\x06update\x10\
    \x01\x12\n\n\x06remove\x10\x02\"=\n\rschedule_list\x12,\n\tschedules\x18\
    \x01\x20\x03(\x0b2\x0e.schedule_infoR\tschedules\"\xc1\x01\n\x0cschedule\
    _add\x12#\n\rschedule_name\x18\x01\x20\x01(\tR\x0cscheduleName\x12>\n\
    \x0ething_relation\x18\x02\x20\x03(\x0b2\x17.schedule_relation_infoR\rth\
    ingRelation\x12(\n\x10schedule_img_idx\x18\x03\x20\x01(\rR\x0escheduleIm\
    gIdx\x12\"\n\x04mode\x18\x04\x20\x01(\x0e2\x0e.schedule_modeR\x04mode\"u\
    \n\x12thing_insert_group\x12\x1f\n\x0bschedule_id\x18\x01\x20\x01(\tR\ns\
    cheduleId\x12>\n\x0ething_relation\x18\x02\x20\x03(\x0b2\x17.schedule_re\
    lation_infoR\rthingRelation\"P\n\x12thing_remove_group\x12\x1f\n\x0bsche\
    dule_id\x18\x01\x20\x01(\tR\nscheduleId\x12\x19\n\x08thing_id\x18\x02\
    \x20\x03(\tR\x07thingId*C\n\rschedule_mode\x12\x08\n\x04None\x10\0\x12\t\
    \n\x05Maual\x10\x01\x12\x0e\n\nTimePeriod\x10\x02\x12\r\n\tCondition\x10\
    \x03b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(Schedule_info::generated_message_descriptor_data());
            messages.push(Schedule_cycle_time::generated_message_descriptor_data());
            messages.push(Schedule_timeperiod_mode::generated_message_descriptor_data());
            messages.push(Schedule_condition_mode::generated_message_descriptor_data());
            messages.push(Schedule_relation_info::generated_message_descriptor_data());
            messages.push(Schedule_relation_list::generated_message_descriptor_data());
            messages.push(Schedule_relation_list_update::generated_message_descriptor_data());
            messages.push(Schedule_list::generated_message_descriptor_data());
            messages.push(Schedule_add::generated_message_descriptor_data());
            messages.push(Thing_insert_group::generated_message_descriptor_data());
            messages.push(Thing_remove_group::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(Schedule_mode::generated_enum_descriptor_data());
            enums.push(schedule_timeperiod_mode::Schedule_cycle_week::generated_enum_descriptor_data());
            enums.push(schedule_relation_list_update::Schedule_relation_list_op::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
