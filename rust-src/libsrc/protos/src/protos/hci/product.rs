// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `product.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:product_info)
pub struct Product_info {
    // message fields
    // @@protoc_insertion_point(field:product_info.parent_product_id)
    pub parent_product_id: ::std::string::String,
    // @@protoc_insertion_point(field:product_info.product_id)
    pub product_id: ::std::string::String,
    // @@protoc_insertion_point(field:product_info.product_name)
    pub product_name: ::std::string::String,
    // @@protoc_insertion_point(field:product_info.children)
    pub children: ::protobuf::MessageField<Product_info_list>,
    // special fields
    // @@protoc_insertion_point(special_field:product_info.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Product_info {
    fn default() -> &'a Product_info {
        <Product_info as ::protobuf::Message>::default_instance()
    }
}

impl Product_info {
    pub fn new() -> Product_info {
        ::std::default::Default::default()
    }

    // string parent_product_id = 1;

    pub fn parent_product_id(&self) -> &str {
        &self.parent_product_id
    }

    pub fn clear_parent_product_id(&mut self) {
        self.parent_product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_product_id(&mut self, v: ::std::string::String) {
        self.parent_product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.parent_product_id
    }

    // Take field
    pub fn take_parent_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent_product_id, ::std::string::String::new())
    }

    // string product_id = 2;

    pub fn product_id(&self) -> &str {
        &self.product_id
    }

    pub fn clear_product_id(&mut self) {
        self.product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_id(&mut self, v: ::std::string::String) {
        self.product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.product_id
    }

    // Take field
    pub fn take_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_id, ::std::string::String::new())
    }

    // string product_name = 3;

    pub fn product_name(&self) -> &str {
        &self.product_name
    }

    pub fn clear_product_name(&mut self) {
        self.product_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_name(&mut self, v: ::std::string::String) {
        self.product_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_name(&mut self) -> &mut ::std::string::String {
        &mut self.product_name
    }

    // Take field
    pub fn take_product_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_name, ::std::string::String::new())
    }

    // .product_info_list children = 20;

    pub fn children(&self) -> &Product_info_list {
        self.children.as_ref().unwrap_or_else(|| <Product_info_list as ::protobuf::Message>::default_instance())
    }

    pub fn clear_children(&mut self) {
        self.children.clear();
    }

    pub fn has_children(&self) -> bool {
        self.children.is_some()
    }

    // Param is passed by value, moved
    pub fn set_children(&mut self, v: Product_info_list) {
        self.children = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_children(&mut self) -> &mut Product_info_list {
        self.children.mut_or_insert_default()
    }

    // Take field
    pub fn take_children(&mut self) -> Product_info_list {
        self.children.take().unwrap_or_else(|| Product_info_list::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_product_id",
            |m: &Product_info| { &m.parent_product_id },
            |m: &mut Product_info| { &mut m.parent_product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "product_id",
            |m: &Product_info| { &m.product_id },
            |m: &mut Product_info| { &mut m.product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "product_name",
            |m: &Product_info| { &m.product_name },
            |m: &mut Product_info| { &mut m.product_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Product_info_list>(
            "children",
            |m: &Product_info| { &m.children },
            |m: &mut Product_info| { &mut m.children },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Product_info>(
            "product_info",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Product_info {
    const NAME: &'static str = "product_info";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent_product_id = is.read_string()?;
                },
                18 => {
                    self.product_id = is.read_string()?;
                },
                26 => {
                    self.product_name = is.read_string()?;
                },
                162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.children)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent_product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent_product_id);
        }
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.product_id);
        }
        if !self.product_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.product_name);
        }
        if let Some(v) = self.children.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent_product_id.is_empty() {
            os.write_string(1, &self.parent_product_id)?;
        }
        if !self.product_id.is_empty() {
            os.write_string(2, &self.product_id)?;
        }
        if !self.product_name.is_empty() {
            os.write_string(3, &self.product_name)?;
        }
        if let Some(v) = self.children.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Product_info {
        Product_info::new()
    }

    fn clear(&mut self) {
        self.parent_product_id.clear();
        self.product_id.clear();
        self.product_name.clear();
        self.children.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Product_info {
        static instance: Product_info = Product_info {
            parent_product_id: ::std::string::String::new(),
            product_id: ::std::string::String::new(),
            product_name: ::std::string::String::new(),
            children: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Product_info {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("product_info").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Product_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Product_info {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:product_info_list)
pub struct Product_info_list {
    // message fields
    // @@protoc_insertion_point(field:product_info_list.products)
    pub products: ::std::vec::Vec<Product_info>,
    // special fields
    // @@protoc_insertion_point(special_field:product_info_list.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Product_info_list {
    fn default() -> &'a Product_info_list {
        <Product_info_list as ::protobuf::Message>::default_instance()
    }
}

impl Product_info_list {
    pub fn new() -> Product_info_list {
        ::std::default::Default::default()
    }

    // repeated .product_info products = 1;

    pub fn products(&self) -> &[Product_info] {
        &self.products
    }

    pub fn clear_products(&mut self) {
        self.products.clear();
    }

    // Param is passed by value, moved
    pub fn set_products(&mut self, v: ::std::vec::Vec<Product_info>) {
        self.products = v;
    }

    // Mutable pointer to the field.
    pub fn mut_products(&mut self) -> &mut ::std::vec::Vec<Product_info> {
        &mut self.products
    }

    // Take field
    pub fn take_products(&mut self) -> ::std::vec::Vec<Product_info> {
        ::std::mem::replace(&mut self.products, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "products",
            |m: &Product_info_list| { &m.products },
            |m: &mut Product_info_list| { &mut m.products },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Product_info_list>(
            "product_info_list",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Product_info_list {
    const NAME: &'static str = "product_info_list";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.products.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.products {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.products {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Product_info_list {
        Product_info_list::new()
    }

    fn clear(&mut self) {
        self.products.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Product_info_list {
        static instance: Product_info_list = Product_info_list {
            products: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Product_info_list {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("product_info_list").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Product_info_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Product_info_list {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:product_add)
pub struct Product_add {
    // message fields
    // @@protoc_insertion_point(field:product_add.product)
    pub product: ::protobuf::MessageField<Product_info>,
    // special fields
    // @@protoc_insertion_point(special_field:product_add.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Product_add {
    fn default() -> &'a Product_add {
        <Product_add as ::protobuf::Message>::default_instance()
    }
}

impl Product_add {
    pub fn new() -> Product_add {
        ::std::default::Default::default()
    }

    // .product_info product = 1;

    pub fn product(&self) -> &Product_info {
        self.product.as_ref().unwrap_or_else(|| <Product_info as ::protobuf::Message>::default_instance())
    }

    pub fn clear_product(&mut self) {
        self.product.clear();
    }

    pub fn has_product(&self) -> bool {
        self.product.is_some()
    }

    // Param is passed by value, moved
    pub fn set_product(&mut self, v: Product_info) {
        self.product = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product(&mut self) -> &mut Product_info {
        self.product.mut_or_insert_default()
    }

    // Take field
    pub fn take_product(&mut self) -> Product_info {
        self.product.take().unwrap_or_else(|| Product_info::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Product_info>(
            "product",
            |m: &Product_add| { &m.product },
            |m: &mut Product_add| { &mut m.product },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Product_add>(
            "product_add",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Product_add {
    const NAME: &'static str = "product_add";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.product)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.product.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.product.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Product_add {
        Product_add::new()
    }

    fn clear(&mut self) {
        self.product.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Product_add {
        static instance: Product_add = Product_add {
            product: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Product_add {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("product_add").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Product_add {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Product_add {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:product_query_all)
pub struct Product_query_all {
    // message fields
    // @@protoc_insertion_point(field:product_query_all.brand_id)
    pub brand_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:product_query_all.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Product_query_all {
    fn default() -> &'a Product_query_all {
        <Product_query_all as ::protobuf::Message>::default_instance()
    }
}

impl Product_query_all {
    pub fn new() -> Product_query_all {
        ::std::default::Default::default()
    }

    // string brand_id = 1;

    pub fn brand_id(&self) -> &str {
        &self.brand_id
    }

    pub fn clear_brand_id(&mut self) {
        self.brand_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_brand_id(&mut self, v: ::std::string::String) {
        self.brand_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_brand_id(&mut self) -> &mut ::std::string::String {
        &mut self.brand_id
    }

    // Take field
    pub fn take_brand_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.brand_id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "brand_id",
            |m: &Product_query_all| { &m.brand_id },
            |m: &mut Product_query_all| { &mut m.brand_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Product_query_all>(
            "product_query_all",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Product_query_all {
    const NAME: &'static str = "product_query_all";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.brand_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.brand_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.brand_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.brand_id.is_empty() {
            os.write_string(1, &self.brand_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Product_query_all {
        Product_query_all::new()
    }

    fn clear(&mut self) {
        self.brand_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Product_query_all {
        static instance: Product_query_all = Product_query_all {
            brand_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Product_query_all {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("product_query_all").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Product_query_all {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Product_query_all {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rproduct.proto\"\xac\x01\n\x0cproduct_info\x12*\n\x11parent_product_i\
    d\x18\x01\x20\x01(\tR\x0fparentProductId\x12\x1d\n\nproduct_id\x18\x02\
    \x20\x01(\tR\tproductId\x12!\n\x0cproduct_name\x18\x03\x20\x01(\tR\x0bpr\
    oductName\x12.\n\x08children\x18\x14\x20\x01(\x0b2\x12.product_info_list\
    R\x08children\">\n\x11product_info_list\x12)\n\x08products\x18\x01\x20\
    \x03(\x0b2\r.product_infoR\x08products\"6\n\x0bproduct_add\x12'\n\x07pro\
    duct\x18\x01\x20\x01(\x0b2\r.product_infoR\x07product\".\n\x11product_qu\
    ery_all\x12\x19\n\x08brand_id\x18\x01\x20\x01(\tR\x07brandIdb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Product_info::generated_message_descriptor_data());
            messages.push(Product_info_list::generated_message_descriptor_data());
            messages.push(Product_add::generated_message_descriptor_data());
            messages.push(Product_query_all::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
