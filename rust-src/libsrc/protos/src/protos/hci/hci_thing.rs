// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `hci_thing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hci_thing)
pub struct Hci_thing {
    // message fields
    // @@protoc_insertion_point(field:hci_thing.thing_id)
    pub thing_id: ::std::string::String,
    // @@protoc_insertion_point(field:hci_thing.mac_address)
    pub mac_address: ::std::string::String,
    // @@protoc_insertion_point(field:hci_thing.status)
    pub status: ::protobuf::EnumOrUnknown<hci_thing::Hci_thing_status>,
    // @@protoc_insertion_point(field:hci_thing.data)
    pub data: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hci_thing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hci_thing {
    fn default() -> &'a Hci_thing {
        <Hci_thing as ::protobuf::Message>::default_instance()
    }
}

impl Hci_thing {
    pub fn new() -> Hci_thing {
        ::std::default::Default::default()
    }

    // string thing_id = 1;

    pub fn thing_id(&self) -> &str {
        &self.thing_id
    }

    pub fn clear_thing_id(&mut self) {
        self.thing_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_id(&mut self, v: ::std::string::String) {
        self.thing_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_id(&mut self) -> &mut ::std::string::String {
        &mut self.thing_id
    }

    // Take field
    pub fn take_thing_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_id, ::std::string::String::new())
    }

    // string mac_address = 2;

    pub fn mac_address(&self) -> &str {
        &self.mac_address
    }

    pub fn clear_mac_address(&mut self) {
        self.mac_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_mac_address(&mut self, v: ::std::string::String) {
        self.mac_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac_address(&mut self) -> &mut ::std::string::String {
        &mut self.mac_address
    }

    // Take field
    pub fn take_mac_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mac_address, ::std::string::String::new())
    }

    // .hci_thing.hci_thing_status status = 3;

    pub fn status(&self) -> hci_thing::Hci_thing_status {
        self.status.enum_value_or_default()
    }

    pub fn clear_status(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(hci_thing::Hci_thing_status::NotFound);
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: hci_thing::Hci_thing_status) {
        self.status = ::protobuf::EnumOrUnknown::new(v);
    }

    // repeated .hci_thing.DataEntry data = 4;

    pub fn data(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.data
    }

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.data, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_id",
            |m: &Hci_thing| { &m.thing_id },
            |m: &mut Hci_thing| { &mut m.thing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac_address",
            |m: &Hci_thing| { &m.mac_address },
            |m: &mut Hci_thing| { &mut m.mac_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Hci_thing| { &m.status },
            |m: &mut Hci_thing| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "data",
            |m: &Hci_thing| { &m.data },
            |m: &mut Hci_thing| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hci_thing>(
            "hci_thing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hci_thing {
    const NAME: &'static str = "hci_thing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.thing_id = is.read_string()?;
                },
                18 => {
                    self.mac_address = is.read_string()?;
                },
                24 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.data.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.thing_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.thing_id);
        }
        if !self.mac_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mac_address);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(hci_thing::Hci_thing_status::NotFound) {
            my_size += ::protobuf::rt::int32_size(3, self.status.value());
        }
        for (k, v) in &self.data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.thing_id.is_empty() {
            os.write_string(1, &self.thing_id)?;
        }
        if !self.mac_address.is_empty() {
            os.write_string(2, &self.mac_address)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(hci_thing::Hci_thing_status::NotFound) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        for (k, v) in &self.data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hci_thing {
        Hci_thing::new()
    }

    fn clear(&mut self) {
        self.thing_id.clear();
        self.mac_address.clear();
        self.status = ::protobuf::EnumOrUnknown::new(hci_thing::Hci_thing_status::NotFound);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hci_thing {
        static instance: ::protobuf::rt::Lazy<Hci_thing> = ::protobuf::rt::Lazy::new();
        instance.get(Hci_thing::new)
    }
}

impl ::protobuf::MessageFull for Hci_thing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("hci_thing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hci_thing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hci_thing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `hci_thing`
pub mod hci_thing {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hci_thing.hci_thing_status)
    pub enum Hci_thing_status {
        // @@protoc_insertion_point(enum_value:hci_thing.hci_thing_status.NotFound)
        NotFound = 0,
        // @@protoc_insertion_point(enum_value:hci_thing.hci_thing_status.Disabled)
        Disabled = 1,
        // @@protoc_insertion_point(enum_value:hci_thing.hci_thing_status.Online)
        Online = 2,
        // @@protoc_insertion_point(enum_value:hci_thing.hci_thing_status.Offline)
        Offline = 3,
    }

    impl ::protobuf::Enum for Hci_thing_status {
        const NAME: &'static str = "hci_thing_status";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Hci_thing_status> {
            match value {
                0 => ::std::option::Option::Some(Hci_thing_status::NotFound),
                1 => ::std::option::Option::Some(Hci_thing_status::Disabled),
                2 => ::std::option::Option::Some(Hci_thing_status::Online),
                3 => ::std::option::Option::Some(Hci_thing_status::Offline),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Hci_thing_status] = &[
            Hci_thing_status::NotFound,
            Hci_thing_status::Disabled,
            Hci_thing_status::Online,
            Hci_thing_status::Offline,
        ];
    }

    impl ::protobuf::EnumFull for Hci_thing_status {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("hci_thing.hci_thing_status").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Hci_thing_status {
        fn default() -> Self {
            Hci_thing_status::NotFound
        }
    }

    impl Hci_thing_status {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Hci_thing_status>("hci_thing.hci_thing_status")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hci_thing_list)
pub struct Hci_thing_list {
    // message fields
    // @@protoc_insertion_point(field:hci_thing_list.list)
    pub list: ::std::vec::Vec<Hci_thing>,
    // special fields
    // @@protoc_insertion_point(special_field:hci_thing_list.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hci_thing_list {
    fn default() -> &'a Hci_thing_list {
        <Hci_thing_list as ::protobuf::Message>::default_instance()
    }
}

impl Hci_thing_list {
    pub fn new() -> Hci_thing_list {
        ::std::default::Default::default()
    }

    // repeated .hci_thing list = 1;

    pub fn list(&self) -> &[Hci_thing] {
        &self.list
    }

    pub fn clear_list(&mut self) {
        self.list.clear();
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: ::std::vec::Vec<Hci_thing>) {
        self.list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut ::std::vec::Vec<Hci_thing> {
        &mut self.list
    }

    // Take field
    pub fn take_list(&mut self) -> ::std::vec::Vec<Hci_thing> {
        ::std::mem::replace(&mut self.list, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "list",
            |m: &Hci_thing_list| { &m.list },
            |m: &mut Hci_thing_list| { &mut m.list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hci_thing_list>(
            "hci_thing_list",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hci_thing_list {
    const NAME: &'static str = "hci_thing_list";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.list.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hci_thing_list {
        Hci_thing_list::new()
    }

    fn clear(&mut self) {
        self.list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hci_thing_list {
        static instance: Hci_thing_list = Hci_thing_list {
            list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Hci_thing_list {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("hci_thing_list").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hci_thing_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hci_thing_list {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hci_add_thing)
pub struct Hci_add_thing {
    // message fields
    // @@protoc_insertion_point(field:hci_add_thing.brand_id)
    pub brand_id: ::std::string::String,
    // @@protoc_insertion_point(field:hci_add_thing.major_product_id)
    pub major_product_id: ::std::string::String,
    // @@protoc_insertion_point(field:hci_add_thing.minor_product_id)
    pub minor_product_id: ::std::string::String,
    // @@protoc_insertion_point(field:hci_add_thing.thing_name)
    pub thing_name: ::std::string::String,
    // @@protoc_insertion_point(field:hci_add_thing.thing)
    pub thing: ::protobuf::MessageField<Hci_thing>,
    // special fields
    // @@protoc_insertion_point(special_field:hci_add_thing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hci_add_thing {
    fn default() -> &'a Hci_add_thing {
        <Hci_add_thing as ::protobuf::Message>::default_instance()
    }
}

impl Hci_add_thing {
    pub fn new() -> Hci_add_thing {
        ::std::default::Default::default()
    }

    // string brand_id = 1;

    pub fn brand_id(&self) -> &str {
        &self.brand_id
    }

    pub fn clear_brand_id(&mut self) {
        self.brand_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_brand_id(&mut self, v: ::std::string::String) {
        self.brand_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_brand_id(&mut self) -> &mut ::std::string::String {
        &mut self.brand_id
    }

    // Take field
    pub fn take_brand_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.brand_id, ::std::string::String::new())
    }

    // string major_product_id = 2;

    pub fn major_product_id(&self) -> &str {
        &self.major_product_id
    }

    pub fn clear_major_product_id(&mut self) {
        self.major_product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_major_product_id(&mut self, v: ::std::string::String) {
        self.major_product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_major_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.major_product_id
    }

    // Take field
    pub fn take_major_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.major_product_id, ::std::string::String::new())
    }

    // string minor_product_id = 3;

    pub fn minor_product_id(&self) -> &str {
        &self.minor_product_id
    }

    pub fn clear_minor_product_id(&mut self) {
        self.minor_product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_minor_product_id(&mut self, v: ::std::string::String) {
        self.minor_product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_minor_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.minor_product_id
    }

    // Take field
    pub fn take_minor_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.minor_product_id, ::std::string::String::new())
    }

    // string thing_name = 4;

    pub fn thing_name(&self) -> &str {
        &self.thing_name
    }

    pub fn clear_thing_name(&mut self) {
        self.thing_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_name(&mut self, v: ::std::string::String) {
        self.thing_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_name(&mut self) -> &mut ::std::string::String {
        &mut self.thing_name
    }

    // Take field
    pub fn take_thing_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_name, ::std::string::String::new())
    }

    // .hci_thing thing = 5;

    pub fn thing(&self) -> &Hci_thing {
        self.thing.as_ref().unwrap_or_else(|| <Hci_thing as ::protobuf::Message>::default_instance())
    }

    pub fn clear_thing(&mut self) {
        self.thing.clear();
    }

    pub fn has_thing(&self) -> bool {
        self.thing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thing(&mut self, v: Hci_thing) {
        self.thing = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing(&mut self) -> &mut Hci_thing {
        self.thing.mut_or_insert_default()
    }

    // Take field
    pub fn take_thing(&mut self) -> Hci_thing {
        self.thing.take().unwrap_or_else(|| Hci_thing::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "brand_id",
            |m: &Hci_add_thing| { &m.brand_id },
            |m: &mut Hci_add_thing| { &mut m.brand_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "major_product_id",
            |m: &Hci_add_thing| { &m.major_product_id },
            |m: &mut Hci_add_thing| { &mut m.major_product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "minor_product_id",
            |m: &Hci_add_thing| { &m.minor_product_id },
            |m: &mut Hci_add_thing| { &mut m.minor_product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_name",
            |m: &Hci_add_thing| { &m.thing_name },
            |m: &mut Hci_add_thing| { &mut m.thing_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Hci_thing>(
            "thing",
            |m: &Hci_add_thing| { &m.thing },
            |m: &mut Hci_add_thing| { &mut m.thing },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hci_add_thing>(
            "hci_add_thing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hci_add_thing {
    const NAME: &'static str = "hci_add_thing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.brand_id = is.read_string()?;
                },
                18 => {
                    self.major_product_id = is.read_string()?;
                },
                26 => {
                    self.minor_product_id = is.read_string()?;
                },
                34 => {
                    self.thing_name = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.thing)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.brand_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.brand_id);
        }
        if !self.major_product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.major_product_id);
        }
        if !self.minor_product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.minor_product_id);
        }
        if !self.thing_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.thing_name);
        }
        if let Some(v) = self.thing.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.brand_id.is_empty() {
            os.write_string(1, &self.brand_id)?;
        }
        if !self.major_product_id.is_empty() {
            os.write_string(2, &self.major_product_id)?;
        }
        if !self.minor_product_id.is_empty() {
            os.write_string(3, &self.minor_product_id)?;
        }
        if !self.thing_name.is_empty() {
            os.write_string(4, &self.thing_name)?;
        }
        if let Some(v) = self.thing.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hci_add_thing {
        Hci_add_thing::new()
    }

    fn clear(&mut self) {
        self.brand_id.clear();
        self.major_product_id.clear();
        self.minor_product_id.clear();
        self.thing_name.clear();
        self.thing.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hci_add_thing {
        static instance: Hci_add_thing = Hci_add_thing {
            brand_id: ::std::string::String::new(),
            major_product_id: ::std::string::String::new(),
            minor_product_id: ::std::string::String::new(),
            thing_name: ::std::string::String::new(),
            thing: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Hci_add_thing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("hci_add_thing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hci_add_thing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hci_add_thing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hci_ctrl_thing)
pub struct Hci_ctrl_thing {
    // message fields
    // @@protoc_insertion_point(field:hci_ctrl_thing.thing_id)
    pub thing_id: ::std::string::String,
    // @@protoc_insertion_point(field:hci_ctrl_thing.data)
    pub data: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hci_ctrl_thing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hci_ctrl_thing {
    fn default() -> &'a Hci_ctrl_thing {
        <Hci_ctrl_thing as ::protobuf::Message>::default_instance()
    }
}

impl Hci_ctrl_thing {
    pub fn new() -> Hci_ctrl_thing {
        ::std::default::Default::default()
    }

    // string thing_id = 2;

    pub fn thing_id(&self) -> &str {
        &self.thing_id
    }

    pub fn clear_thing_id(&mut self) {
        self.thing_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_id(&mut self, v: ::std::string::String) {
        self.thing_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_id(&mut self) -> &mut ::std::string::String {
        &mut self.thing_id
    }

    // Take field
    pub fn take_thing_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_id, ::std::string::String::new())
    }

    // repeated .hci_ctrl_thing.DataEntry data = 3;

    pub fn data(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.data
    }

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.data, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_id",
            |m: &Hci_ctrl_thing| { &m.thing_id },
            |m: &mut Hci_ctrl_thing| { &mut m.thing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "data",
            |m: &Hci_ctrl_thing| { &m.data },
            |m: &mut Hci_ctrl_thing| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hci_ctrl_thing>(
            "hci_ctrl_thing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hci_ctrl_thing {
    const NAME: &'static str = "hci_ctrl_thing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.thing_id = is.read_string()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.data.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.thing_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.thing_id);
        }
        for (k, v) in &self.data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.thing_id.is_empty() {
            os.write_string(2, &self.thing_id)?;
        }
        for (k, v) in &self.data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hci_ctrl_thing {
        Hci_ctrl_thing::new()
    }

    fn clear(&mut self) {
        self.thing_id.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hci_ctrl_thing {
        static instance: ::protobuf::rt::Lazy<Hci_ctrl_thing> = ::protobuf::rt::Lazy::new();
        instance.get(Hci_ctrl_thing::new)
    }
}

impl ::protobuf::MessageFull for Hci_ctrl_thing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("hci_ctrl_thing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hci_ctrl_thing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hci_ctrl_thing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hci_crud_thing)
pub struct Hci_crud_thing {
    // message fields
    // @@protoc_insertion_point(field:hci_crud_thing.thing_id)
    pub thing_id: ::std::string::String,
    // @@protoc_insertion_point(field:hci_crud_thing.method)
    pub method: ::protobuf::EnumOrUnknown<hci_crud_thing::Hci_crud_m>,
    // @@protoc_insertion_point(field:hci_crud_thing.data)
    pub data: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hci_crud_thing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hci_crud_thing {
    fn default() -> &'a Hci_crud_thing {
        <Hci_crud_thing as ::protobuf::Message>::default_instance()
    }
}

impl Hci_crud_thing {
    pub fn new() -> Hci_crud_thing {
        ::std::default::Default::default()
    }

    // string thing_id = 1;

    pub fn thing_id(&self) -> &str {
        &self.thing_id
    }

    pub fn clear_thing_id(&mut self) {
        self.thing_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_id(&mut self, v: ::std::string::String) {
        self.thing_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_id(&mut self) -> &mut ::std::string::String {
        &mut self.thing_id
    }

    // Take field
    pub fn take_thing_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_id, ::std::string::String::new())
    }

    // .hci_crud_thing.hci_crud_m method = 2;

    pub fn method(&self) -> hci_crud_thing::Hci_crud_m {
        self.method.enum_value_or_default()
    }

    pub fn clear_method(&mut self) {
        self.method = ::protobuf::EnumOrUnknown::new(hci_crud_thing::Hci_crud_m::remove);
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: hci_crud_thing::Hci_crud_m) {
        self.method = ::protobuf::EnumOrUnknown::new(v);
    }

    // repeated .hci_crud_thing.DataEntry data = 3;

    pub fn data(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.data
    }

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.data, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_id",
            |m: &Hci_crud_thing| { &m.thing_id },
            |m: &mut Hci_crud_thing| { &mut m.thing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "method",
            |m: &Hci_crud_thing| { &m.method },
            |m: &mut Hci_crud_thing| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "data",
            |m: &Hci_crud_thing| { &m.data },
            |m: &mut Hci_crud_thing| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hci_crud_thing>(
            "hci_crud_thing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hci_crud_thing {
    const NAME: &'static str = "hci_crud_thing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.thing_id = is.read_string()?;
                },
                16 => {
                    self.method = is.read_enum_or_unknown()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.data.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.thing_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.thing_id);
        }
        if self.method != ::protobuf::EnumOrUnknown::new(hci_crud_thing::Hci_crud_m::remove) {
            my_size += ::protobuf::rt::int32_size(2, self.method.value());
        }
        for (k, v) in &self.data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.thing_id.is_empty() {
            os.write_string(1, &self.thing_id)?;
        }
        if self.method != ::protobuf::EnumOrUnknown::new(hci_crud_thing::Hci_crud_m::remove) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.method))?;
        }
        for (k, v) in &self.data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hci_crud_thing {
        Hci_crud_thing::new()
    }

    fn clear(&mut self) {
        self.thing_id.clear();
        self.method = ::protobuf::EnumOrUnknown::new(hci_crud_thing::Hci_crud_m::remove);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hci_crud_thing {
        static instance: ::protobuf::rt::Lazy<Hci_crud_thing> = ::protobuf::rt::Lazy::new();
        instance.get(Hci_crud_thing::new)
    }
}

impl ::protobuf::MessageFull for Hci_crud_thing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("hci_crud_thing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hci_crud_thing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hci_crud_thing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `hci_crud_thing`
pub mod hci_crud_thing {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hci_crud_thing.hci_crud_m)
    pub enum Hci_crud_m {
        // @@protoc_insertion_point(enum_value:hci_crud_thing.hci_crud_m.remove)
        remove = 0,
        // @@protoc_insertion_point(enum_value:hci_crud_thing.hci_crud_m.pair)
        pair = 1,
        // @@protoc_insertion_point(enum_value:hci_crud_thing.hci_crud_m.remove_pair)
        remove_pair = 2,
        // @@protoc_insertion_point(enum_value:hci_crud_thing.hci_crud_m.query)
        query = 3,
    }

    impl ::protobuf::Enum for Hci_crud_m {
        const NAME: &'static str = "hci_crud_m";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Hci_crud_m> {
            match value {
                0 => ::std::option::Option::Some(Hci_crud_m::remove),
                1 => ::std::option::Option::Some(Hci_crud_m::pair),
                2 => ::std::option::Option::Some(Hci_crud_m::remove_pair),
                3 => ::std::option::Option::Some(Hci_crud_m::query),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Hci_crud_m] = &[
            Hci_crud_m::remove,
            Hci_crud_m::pair,
            Hci_crud_m::remove_pair,
            Hci_crud_m::query,
        ];
    }

    impl ::protobuf::EnumFull for Hci_crud_m {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("hci_crud_thing.hci_crud_m").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Hci_crud_m {
        fn default() -> Self {
            Hci_crud_m::remove
        }
    }

    impl Hci_crud_m {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Hci_crud_m>("hci_crud_thing.hci_crud_m")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hci_task_result)
pub struct Hci_task_result {
    // message fields
    // @@protoc_insertion_point(field:hci_task_result.task_id)
    pub task_id: u32,
    // @@protoc_insertion_point(field:hci_task_result.thing_ids)
    pub thing_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hci_task_result.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hci_task_result {
    fn default() -> &'a Hci_task_result {
        <Hci_task_result as ::protobuf::Message>::default_instance()
    }
}

impl Hci_task_result {
    pub fn new() -> Hci_task_result {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;

    pub fn task_id(&self) -> u32 {
        self.task_id
    }

    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    // repeated string thing_ids = 2;

    pub fn thing_ids(&self) -> &[::std::string::String] {
        &self.thing_ids
    }

    pub fn clear_thing_ids(&mut self) {
        self.thing_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_ids(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.thing_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_ids(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.thing_ids
    }

    // Take field
    pub fn take_thing_ids(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.thing_ids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "task_id",
            |m: &Hci_task_result| { &m.task_id },
            |m: &mut Hci_task_result| { &mut m.task_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "thing_ids",
            |m: &Hci_task_result| { &m.thing_ids },
            |m: &mut Hci_task_result| { &mut m.thing_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hci_task_result>(
            "hci_task_result",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hci_task_result {
    const NAME: &'static str = "hci_task_result";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.task_id = is.read_uint32()?;
                },
                18 => {
                    self.thing_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.task_id);
        }
        for value in &self.thing_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        for v in &self.thing_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hci_task_result {
        Hci_task_result::new()
    }

    fn clear(&mut self) {
        self.task_id = 0;
        self.thing_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hci_task_result {
        static instance: Hci_task_result = Hci_task_result {
            task_id: 0,
            thing_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Hci_task_result {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("hci_task_result").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hci_task_result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hci_task_result {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fhci_thing.proto\x1a\x0bbrand.proto\"\xa8\x02\n\thci_thing\x12\x19\
    \n\x08thing_id\x18\x01\x20\x01(\tR\x07thingId\x12\x1f\n\x0bmac_address\
    \x18\x02\x20\x01(\tR\nmacAddress\x123\n\x06status\x18\x03\x20\x01(\x0e2\
    \x1b.hci_thing.hci_thing_statusR\x06status\x12(\n\x04data\x18\x04\x20\
    \x03(\x0b2\x14.hci_thing.DataEntryR\x04data\x1a7\n\tDataEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"G\n\x10hci_thing_status\x12\x0c\n\x08NotFound\x10\
    \0\x12\x0c\n\x08Disabled\x10\x01\x12\n\n\x06Online\x10\x02\x12\x0b\n\x07\
    Offline\x10\x03\"0\n\x0ehci_thing_list\x12\x1e\n\x04list\x18\x01\x20\x03\
    (\x0b2\n.hci_thingR\x04list\"\xbf\x01\n\rhci_add_thing\x12\x19\n\x08bran\
    d_id\x18\x01\x20\x01(\tR\x07brandId\x12(\n\x10major_product_id\x18\x02\
    \x20\x01(\tR\x0emajorProductId\x12(\n\x10minor_product_id\x18\x03\x20\
    \x01(\tR\x0eminorProductId\x12\x1d\n\nthing_name\x18\x04\x20\x01(\tR\tth\
    ingName\x12\x20\n\x05thing\x18\x05\x20\x01(\x0b2\n.hci_thingR\x05thing\"\
    \x93\x01\n\x0ehci_ctrl_thing\x12\x19\n\x08thing_id\x18\x02\x20\x01(\tR\
    \x07thingId\x12-\n\x04data\x18\x03\x20\x03(\x0b2\x19.hci_ctrl_thing.Data\
    EntryR\x04data\x1a7\n\tDataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\x87\
    \x02\n\x0ehci_crud_thing\x12\x19\n\x08thing_id\x18\x01\x20\x01(\tR\x07th\
    ingId\x122\n\x06method\x18\x02\x20\x01(\x0e2\x1a.hci_crud_thing.hci_crud\
    _mR\x06method\x12-\n\x04data\x18\x03\x20\x03(\x0b2\x19.hci_crud_thing.Da\
    taEntryR\x04data\x1a7\n\tDataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\">\n\n\
    hci_crud_m\x12\n\n\x06remove\x10\0\x12\x08\n\x04pair\x10\x01\x12\x0f\n\
    \x0bremove_pair\x10\x02\x12\t\n\x05query\x10\x03\"G\n\x0fhci_task_result\
    \x12\x17\n\x07task_id\x18\x01\x20\x01(\rR\x06taskId\x12\x1b\n\tthing_ids\
    \x18\x02\x20\x03(\tR\x08thingIdsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::brand::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Hci_thing::generated_message_descriptor_data());
            messages.push(Hci_thing_list::generated_message_descriptor_data());
            messages.push(Hci_add_thing::generated_message_descriptor_data());
            messages.push(Hci_ctrl_thing::generated_message_descriptor_data());
            messages.push(Hci_crud_thing::generated_message_descriptor_data());
            messages.push(Hci_task_result::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(hci_thing::Hci_thing_status::generated_enum_descriptor_data());
            enums.push(hci_crud_thing::Hci_crud_m::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
