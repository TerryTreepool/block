// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `thing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:thing_info)
pub struct Thing_info {
    // message fields
    // @@protoc_insertion_point(field:thing_info.brand_id)
    pub brand_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_info.major_product_id)
    pub major_product_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_info.minor_product_id)
    pub minor_product_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_info.thing_id)
    pub thing_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_info.thing_name)
    pub thing_name: ::std::string::String,
    // @@protoc_insertion_point(field:thing_info.mac_address)
    pub mac_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:thing_info.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Thing_info {
    fn default() -> &'a Thing_info {
        <Thing_info as ::protobuf::Message>::default_instance()
    }
}

impl Thing_info {
    pub fn new() -> Thing_info {
        ::std::default::Default::default()
    }

    // string brand_id = 1;

    pub fn brand_id(&self) -> &str {
        &self.brand_id
    }

    pub fn clear_brand_id(&mut self) {
        self.brand_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_brand_id(&mut self, v: ::std::string::String) {
        self.brand_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_brand_id(&mut self) -> &mut ::std::string::String {
        &mut self.brand_id
    }

    // Take field
    pub fn take_brand_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.brand_id, ::std::string::String::new())
    }

    // string major_product_id = 2;

    pub fn major_product_id(&self) -> &str {
        &self.major_product_id
    }

    pub fn clear_major_product_id(&mut self) {
        self.major_product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_major_product_id(&mut self, v: ::std::string::String) {
        self.major_product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_major_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.major_product_id
    }

    // Take field
    pub fn take_major_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.major_product_id, ::std::string::String::new())
    }

    // string minor_product_id = 3;

    pub fn minor_product_id(&self) -> &str {
        &self.minor_product_id
    }

    pub fn clear_minor_product_id(&mut self) {
        self.minor_product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_minor_product_id(&mut self, v: ::std::string::String) {
        self.minor_product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_minor_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.minor_product_id
    }

    // Take field
    pub fn take_minor_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.minor_product_id, ::std::string::String::new())
    }

    // string thing_id = 4;

    pub fn thing_id(&self) -> &str {
        &self.thing_id
    }

    pub fn clear_thing_id(&mut self) {
        self.thing_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_id(&mut self, v: ::std::string::String) {
        self.thing_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_id(&mut self) -> &mut ::std::string::String {
        &mut self.thing_id
    }

    // Take field
    pub fn take_thing_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_id, ::std::string::String::new())
    }

    // string thing_name = 5;

    pub fn thing_name(&self) -> &str {
        &self.thing_name
    }

    pub fn clear_thing_name(&mut self) {
        self.thing_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_name(&mut self, v: ::std::string::String) {
        self.thing_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_name(&mut self) -> &mut ::std::string::String {
        &mut self.thing_name
    }

    // Take field
    pub fn take_thing_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_name, ::std::string::String::new())
    }

    // string mac_address = 6;

    pub fn mac_address(&self) -> &str {
        &self.mac_address
    }

    pub fn clear_mac_address(&mut self) {
        self.mac_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_mac_address(&mut self, v: ::std::string::String) {
        self.mac_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac_address(&mut self) -> &mut ::std::string::String {
        &mut self.mac_address
    }

    // Take field
    pub fn take_mac_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mac_address, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "brand_id",
            |m: &Thing_info| { &m.brand_id },
            |m: &mut Thing_info| { &mut m.brand_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "major_product_id",
            |m: &Thing_info| { &m.major_product_id },
            |m: &mut Thing_info| { &mut m.major_product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "minor_product_id",
            |m: &Thing_info| { &m.minor_product_id },
            |m: &mut Thing_info| { &mut m.minor_product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_id",
            |m: &Thing_info| { &m.thing_id },
            |m: &mut Thing_info| { &mut m.thing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_name",
            |m: &Thing_info| { &m.thing_name },
            |m: &mut Thing_info| { &mut m.thing_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac_address",
            |m: &Thing_info| { &m.mac_address },
            |m: &mut Thing_info| { &mut m.mac_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Thing_info>(
            "thing_info",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Thing_info {
    const NAME: &'static str = "thing_info";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.brand_id = is.read_string()?;
                },
                18 => {
                    self.major_product_id = is.read_string()?;
                },
                26 => {
                    self.minor_product_id = is.read_string()?;
                },
                34 => {
                    self.thing_id = is.read_string()?;
                },
                42 => {
                    self.thing_name = is.read_string()?;
                },
                50 => {
                    self.mac_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.brand_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.brand_id);
        }
        if !self.major_product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.major_product_id);
        }
        if !self.minor_product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.minor_product_id);
        }
        if !self.thing_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.thing_id);
        }
        if !self.thing_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.thing_name);
        }
        if !self.mac_address.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.mac_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.brand_id.is_empty() {
            os.write_string(1, &self.brand_id)?;
        }
        if !self.major_product_id.is_empty() {
            os.write_string(2, &self.major_product_id)?;
        }
        if !self.minor_product_id.is_empty() {
            os.write_string(3, &self.minor_product_id)?;
        }
        if !self.thing_id.is_empty() {
            os.write_string(4, &self.thing_id)?;
        }
        if !self.thing_name.is_empty() {
            os.write_string(5, &self.thing_name)?;
        }
        if !self.mac_address.is_empty() {
            os.write_string(6, &self.mac_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Thing_info {
        Thing_info::new()
    }

    fn clear(&mut self) {
        self.brand_id.clear();
        self.major_product_id.clear();
        self.minor_product_id.clear();
        self.thing_id.clear();
        self.thing_name.clear();
        self.mac_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Thing_info {
        static instance: Thing_info = Thing_info {
            brand_id: ::std::string::String::new(),
            major_product_id: ::std::string::String::new(),
            minor_product_id: ::std::string::String::new(),
            thing_id: ::std::string::String::new(),
            thing_name: ::std::string::String::new(),
            mac_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Thing_info {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("thing_info").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Thing_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing_info {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:thing_info_list)
pub struct Thing_info_list {
    // message fields
    // @@protoc_insertion_point(field:thing_info_list.things)
    pub things: ::std::vec::Vec<Thing_info>,
    // special fields
    // @@protoc_insertion_point(special_field:thing_info_list.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Thing_info_list {
    fn default() -> &'a Thing_info_list {
        <Thing_info_list as ::protobuf::Message>::default_instance()
    }
}

impl Thing_info_list {
    pub fn new() -> Thing_info_list {
        ::std::default::Default::default()
    }

    // repeated .thing_info things = 1;

    pub fn things(&self) -> &[Thing_info] {
        &self.things
    }

    pub fn clear_things(&mut self) {
        self.things.clear();
    }

    // Param is passed by value, moved
    pub fn set_things(&mut self, v: ::std::vec::Vec<Thing_info>) {
        self.things = v;
    }

    // Mutable pointer to the field.
    pub fn mut_things(&mut self) -> &mut ::std::vec::Vec<Thing_info> {
        &mut self.things
    }

    // Take field
    pub fn take_things(&mut self) -> ::std::vec::Vec<Thing_info> {
        ::std::mem::replace(&mut self.things, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "things",
            |m: &Thing_info_list| { &m.things },
            |m: &mut Thing_info_list| { &mut m.things },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Thing_info_list>(
            "thing_info_list",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Thing_info_list {
    const NAME: &'static str = "thing_info_list";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.things.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.things {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.things {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Thing_info_list {
        Thing_info_list::new()
    }

    fn clear(&mut self) {
        self.things.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Thing_info_list {
        static instance: Thing_info_list = Thing_info_list {
            things: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Thing_info_list {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("thing_info_list").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Thing_info_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing_info_list {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:thing_add)
pub struct Thing_add {
    // message fields
    // @@protoc_insertion_point(field:thing_add.thing)
    pub thing: ::protobuf::MessageField<Thing_info>,
    // @@protoc_insertion_point(field:thing_add.thing_data)
    pub thing_data: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:thing_add.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Thing_add {
    fn default() -> &'a Thing_add {
        <Thing_add as ::protobuf::Message>::default_instance()
    }
}

impl Thing_add {
    pub fn new() -> Thing_add {
        ::std::default::Default::default()
    }

    // .thing_info thing = 1;

    pub fn thing(&self) -> &Thing_info {
        self.thing.as_ref().unwrap_or_else(|| <Thing_info as ::protobuf::Message>::default_instance())
    }

    pub fn clear_thing(&mut self) {
        self.thing.clear();
    }

    pub fn has_thing(&self) -> bool {
        self.thing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thing(&mut self, v: Thing_info) {
        self.thing = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing(&mut self) -> &mut Thing_info {
        self.thing.mut_or_insert_default()
    }

    // Take field
    pub fn take_thing(&mut self) -> Thing_info {
        self.thing.take().unwrap_or_else(|| Thing_info::new())
    }

    // repeated .thing_add.ThingDataEntry thing_data = 2;

    pub fn thing_data(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.thing_data
    }

    pub fn clear_thing_data(&mut self) {
        self.thing_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_data(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.thing_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thing_data(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.thing_data
    }

    // Take field
    pub fn take_thing_data(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.thing_data, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Thing_info>(
            "thing",
            |m: &Thing_add| { &m.thing },
            |m: &mut Thing_add| { &mut m.thing },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "thing_data",
            |m: &Thing_add| { &m.thing_data },
            |m: &mut Thing_add| { &mut m.thing_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Thing_add>(
            "thing_add",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Thing_add {
    const NAME: &'static str = "thing_add";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.thing)?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.thing_data.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.thing.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.thing_data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.thing.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for (k, v) in &self.thing_data {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Thing_add {
        Thing_add::new()
    }

    fn clear(&mut self) {
        self.thing.clear();
        self.thing_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Thing_add {
        static instance: ::protobuf::rt::Lazy<Thing_add> = ::protobuf::rt::Lazy::new();
        instance.get(Thing_add::new)
    }
}

impl ::protobuf::MessageFull for Thing_add {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("thing_add").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Thing_add {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing_add {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:thing_query)
pub struct Thing_query {
    // message fields
    // @@protoc_insertion_point(field:thing_query.thing_id)
    pub thing_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_query.thing_mac)
    pub thing_mac: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:thing_query.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Thing_query {
    fn default() -> &'a Thing_query {
        <Thing_query as ::protobuf::Message>::default_instance()
    }
}

impl Thing_query {
    pub fn new() -> Thing_query {
        ::std::default::Default::default()
    }

    // string thing_id = 1;

    pub fn thing_id(&self) -> &str {
        &self.thing_id
    }

    pub fn clear_thing_id(&mut self) {
        self.thing_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_id(&mut self, v: ::std::string::String) {
        self.thing_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_id(&mut self) -> &mut ::std::string::String {
        &mut self.thing_id
    }

    // Take field
    pub fn take_thing_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_id, ::std::string::String::new())
    }

    // string thing_mac = 2;

    pub fn thing_mac(&self) -> &str {
        &self.thing_mac
    }

    pub fn clear_thing_mac(&mut self) {
        self.thing_mac.clear();
    }

    // Param is passed by value, moved
    pub fn set_thing_mac(&mut self, v: ::std::string::String) {
        self.thing_mac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing_mac(&mut self) -> &mut ::std::string::String {
        &mut self.thing_mac
    }

    // Take field
    pub fn take_thing_mac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.thing_mac, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_id",
            |m: &Thing_query| { &m.thing_id },
            |m: &mut Thing_query| { &mut m.thing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thing_mac",
            |m: &Thing_query| { &m.thing_mac },
            |m: &mut Thing_query| { &mut m.thing_mac },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Thing_query>(
            "thing_query",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Thing_query {
    const NAME: &'static str = "thing_query";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.thing_id = is.read_string()?;
                },
                18 => {
                    self.thing_mac = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.thing_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.thing_id);
        }
        if !self.thing_mac.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.thing_mac);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.thing_id.is_empty() {
            os.write_string(1, &self.thing_id)?;
        }
        if !self.thing_mac.is_empty() {
            os.write_string(2, &self.thing_mac)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Thing_query {
        Thing_query::new()
    }

    fn clear(&mut self) {
        self.thing_id.clear();
        self.thing_mac.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Thing_query {
        static instance: Thing_query = Thing_query {
            thing_id: ::std::string::String::new(),
            thing_mac: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Thing_query {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("thing_query").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Thing_query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing_query {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:thing_query_all)
pub struct Thing_query_all {
    // message fields
    // @@protoc_insertion_point(field:thing_query_all.brand_id)
    pub brand_id: ::std::string::String,
    // @@protoc_insertion_point(field:thing_query_all.product_id)
    pub product_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:thing_query_all.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Thing_query_all {
    fn default() -> &'a Thing_query_all {
        <Thing_query_all as ::protobuf::Message>::default_instance()
    }
}

impl Thing_query_all {
    pub fn new() -> Thing_query_all {
        ::std::default::Default::default()
    }

    // string brand_id = 1;

    pub fn brand_id(&self) -> &str {
        &self.brand_id
    }

    pub fn clear_brand_id(&mut self) {
        self.brand_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_brand_id(&mut self, v: ::std::string::String) {
        self.brand_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_brand_id(&mut self) -> &mut ::std::string::String {
        &mut self.brand_id
    }

    // Take field
    pub fn take_brand_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.brand_id, ::std::string::String::new())
    }

    // string product_id = 2;

    pub fn product_id(&self) -> &str {
        &self.product_id
    }

    pub fn clear_product_id(&mut self) {
        self.product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_id(&mut self, v: ::std::string::String) {
        self.product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.product_id
    }

    // Take field
    pub fn take_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_id, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "brand_id",
            |m: &Thing_query_all| { &m.brand_id },
            |m: &mut Thing_query_all| { &mut m.brand_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "product_id",
            |m: &Thing_query_all| { &m.product_id },
            |m: &mut Thing_query_all| { &mut m.product_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Thing_query_all>(
            "thing_query_all",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Thing_query_all {
    const NAME: &'static str = "thing_query_all";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.brand_id = is.read_string()?;
                },
                18 => {
                    self.product_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.brand_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.brand_id);
        }
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.product_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.brand_id.is_empty() {
            os.write_string(1, &self.brand_id)?;
        }
        if !self.product_id.is_empty() {
            os.write_string(2, &self.product_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Thing_query_all {
        Thing_query_all::new()
    }

    fn clear(&mut self) {
        self.brand_id.clear();
        self.product_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Thing_query_all {
        static instance: Thing_query_all = Thing_query_all {
            brand_id: ::std::string::String::new(),
            product_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Thing_query_all {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("thing_query_all").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Thing_query_all {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing_query_all {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bthing.proto\"\xd6\x01\n\nthing_info\x12\x19\n\x08brand_id\x18\x01\
    \x20\x01(\tR\x07brandId\x12(\n\x10major_product_id\x18\x02\x20\x01(\tR\
    \x0emajorProductId\x12(\n\x10minor_product_id\x18\x03\x20\x01(\tR\x0emin\
    orProductId\x12\x19\n\x08thing_id\x18\x04\x20\x01(\tR\x07thingId\x12\x1d\
    \n\nthing_name\x18\x05\x20\x01(\tR\tthingName\x12\x1f\n\x0bmac_address\
    \x18\x06\x20\x01(\tR\nmacAddress\"6\n\x0fthing_info_list\x12#\n\x06thing\
    s\x18\x01\x20\x03(\x0b2\x0b.thing_infoR\x06things\"\xa6\x01\n\tthing_add\
    \x12!\n\x05thing\x18\x01\x20\x01(\x0b2\x0b.thing_infoR\x05thing\x128\n\n\
    thing_data\x18\x02\x20\x03(\x0b2\x19.thing_add.ThingDataEntryR\tthingDat\
    a\x1a<\n\x0eThingDataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"E\n\x0bthing\
    _query\x12\x19\n\x08thing_id\x18\x01\x20\x01(\tR\x07thingId\x12\x1b\n\tt\
    hing_mac\x18\x02\x20\x01(\tR\x08thingMac\"K\n\x0fthing_query_all\x12\x19\
    \n\x08brand_id\x18\x01\x20\x01(\tR\x07brandId\x12\x1d\n\nproduct_id\x18\
    \x02\x20\x01(\tR\tproductIdb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Thing_info::generated_message_descriptor_data());
            messages.push(Thing_info_list::generated_message_descriptor_data());
            messages.push(Thing_add::generated_message_descriptor_data());
            messages.push(Thing_query::generated_message_descriptor_data());
            messages.push(Thing_query_all::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
