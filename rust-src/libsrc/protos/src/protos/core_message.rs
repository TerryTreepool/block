// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `core_message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message)
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:message.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:message.mt)
    pub mt: ::protobuf::EnumOrUnknown<message::Message_type>,
    // special fields
    // @@protoc_insertion_point(special_field:message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // string message = 1;

    pub fn message(&self) -> &str {
        &self.message
    }

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .message.message_type mt = 2;

    pub fn mt(&self) -> message::Message_type {
        self.mt.enum_value_or_default()
    }

    pub fn clear_mt(&mut self) {
        self.mt = ::protobuf::EnumOrUnknown::new(message::Message_type::Public);
    }

    // Param is passed by value, moved
    pub fn set_mt(&mut self, v: message::Message_type) {
        self.mt = ::protobuf::EnumOrUnknown::new(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Message| { &m.message },
            |m: &mut Message| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mt",
            |m: &Message| { &m.mt },
            |m: &mut Message| { &mut m.mt },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                16 => {
                    self.mt = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if self.mt != ::protobuf::EnumOrUnknown::new(message::Message_type::Public) {
            my_size += ::protobuf::rt::int32_size(2, self.mt.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if self.mt != ::protobuf::EnumOrUnknown::new(message::Message_type::Public) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.mt))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.mt = ::protobuf::EnumOrUnknown::new(message::Message_type::Public);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            message: ::std::string::String::new(),
            mt: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `message`
pub mod message {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:message.message_type)
    pub enum Message_type {
        // @@protoc_insertion_point(enum_value:message.message_type.Public)
        Public = 0,
        // @@protoc_insertion_point(enum_value:message.message_type.Private)
        Private = 1,
    }

    impl ::protobuf::Enum for Message_type {
        const NAME: &'static str = "message_type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Message_type> {
            match value {
                0 => ::std::option::Option::Some(Message_type::Public),
                1 => ::std::option::Option::Some(Message_type::Private),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Message_type] = &[
            Message_type::Public,
            Message_type::Private,
        ];
    }

    impl ::protobuf::EnumFull for Message_type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("message.message_type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Message_type {
        fn default() -> Self {
            Message_type::Public
        }
    }

    impl Message_type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Message_type>("message.message_type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:subscribe_message)
pub struct Subscribe_message {
    // message fields
    // @@protoc_insertion_point(field:subscribe_message.messge)
    pub messge: ::std::vec::Vec<Message>,
    // special fields
    // @@protoc_insertion_point(special_field:subscribe_message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Subscribe_message {
    fn default() -> &'a Subscribe_message {
        <Subscribe_message as ::protobuf::Message>::default_instance()
    }
}

impl Subscribe_message {
    pub fn new() -> Subscribe_message {
        ::std::default::Default::default()
    }

    // repeated .message messge = 1;

    pub fn messge(&self) -> &[Message] {
        &self.messge
    }

    pub fn clear_messge(&mut self) {
        self.messge.clear();
    }

    // Param is passed by value, moved
    pub fn set_messge(&mut self, v: ::std::vec::Vec<Message>) {
        self.messge = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messge(&mut self) -> &mut ::std::vec::Vec<Message> {
        &mut self.messge
    }

    // Take field
    pub fn take_messge(&mut self) -> ::std::vec::Vec<Message> {
        ::std::mem::replace(&mut self.messge, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messge",
            |m: &Subscribe_message| { &m.messge },
            |m: &mut Subscribe_message| { &mut m.messge },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Subscribe_message>(
            "subscribe_message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Subscribe_message {
    const NAME: &'static str = "subscribe_message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.messge.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.messge {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.messge {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Subscribe_message {
        Subscribe_message::new()
    }

    fn clear(&mut self) {
        self.messge.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Subscribe_message {
        static instance: Subscribe_message = Subscribe_message {
            messge: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Subscribe_message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("subscribe_message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Subscribe_message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Subscribe_message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:dissubscribe_message)
pub struct Dissubscribe_message {
    // message fields
    // @@protoc_insertion_point(field:dissubscribe_message.message_name)
    pub message_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:dissubscribe_message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Dissubscribe_message {
    fn default() -> &'a Dissubscribe_message {
        <Dissubscribe_message as ::protobuf::Message>::default_instance()
    }
}

impl Dissubscribe_message {
    pub fn new() -> Dissubscribe_message {
        ::std::default::Default::default()
    }

    // string message_name = 1;

    pub fn message_name(&self) -> &str {
        &self.message_name
    }

    pub fn clear_message_name(&mut self) {
        self.message_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_name(&mut self, v: ::std::string::String) {
        self.message_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_name(&mut self) -> &mut ::std::string::String {
        &mut self.message_name
    }

    // Take field
    pub fn take_message_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_name, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message_name",
            |m: &Dissubscribe_message| { &m.message_name },
            |m: &mut Dissubscribe_message| { &mut m.message_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dissubscribe_message>(
            "dissubscribe_message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Dissubscribe_message {
    const NAME: &'static str = "dissubscribe_message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message_name.is_empty() {
            os.write_string(1, &self.message_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Dissubscribe_message {
        Dissubscribe_message::new()
    }

    fn clear(&mut self) {
        self.message_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Dissubscribe_message {
        static instance: Dissubscribe_message = Dissubscribe_message {
            message_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Dissubscribe_message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("dissubscribe_message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Dissubscribe_message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dissubscribe_message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:dispatch_message)
pub struct Dispatch_message {
    // message fields
    // @@protoc_insertion_point(field:dispatch_message.text)
    pub text: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:dispatch_message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Dispatch_message {
    fn default() -> &'a Dispatch_message {
        <Dispatch_message as ::protobuf::Message>::default_instance()
    }
}

impl Dispatch_message {
    pub fn new() -> Dispatch_message {
        ::std::default::Default::default()
    }

    // bytes text = 1;

    pub fn text(&self) -> &[u8] {
        &self.text
    }

    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::vec::Vec<u8>) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.text, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &Dispatch_message| { &m.text },
            |m: &mut Dispatch_message| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dispatch_message>(
            "dispatch_message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Dispatch_message {
    const NAME: &'static str = "dispatch_message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.text.is_empty() {
            os.write_bytes(1, &self.text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Dispatch_message {
        Dispatch_message::new()
    }

    fn clear(&mut self) {
        self.text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Dispatch_message {
        static instance: Dispatch_message = Dispatch_message {
            text: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Dispatch_message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("dispatch_message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Dispatch_message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dispatch_message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12core_message.proto\"s\n\x07message\x12\x18\n\x07message\x18\x01\
    \x20\x01(\tR\x07message\x12%\n\x02mt\x18\x02\x20\x01(\x0e2\x15.message.m\
    essage_typeR\x02mt\"'\n\x0cmessage_type\x12\n\n\x06Public\x10\0\x12\x0b\
    \n\x07Private\x10\x01\"5\n\x11subscribe_message\x12\x20\n\x06messge\x18\
    \x01\x20\x03(\x0b2\x08.messageR\x06messge\"9\n\x14dissubscribe_message\
    \x12!\n\x0cmessage_name\x18\x01\x20\x01(\tR\x0bmessageName\"&\n\x10dispa\
    tch_message\x12\x12\n\x04text\x18\x01\x20\x01(\x0cR\x04textb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Message::generated_message_descriptor_data());
            messages.push(Subscribe_message::generated_message_descriptor_data());
            messages.push(Dissubscribe_message::generated_message_descriptor_data());
            messages.push(Dispatch_message::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(message::Message_type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
