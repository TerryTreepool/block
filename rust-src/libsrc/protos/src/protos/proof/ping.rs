// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ping.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proof_of_ping)
pub struct Proof_of_ping {
    // message fields
    // @@protoc_insertion_point(field:proof_of_ping.send_time)
    pub send_time: u64,
    // @@protoc_insertion_point(field:proof_of_ping.ping_sequence)
    pub ping_sequence: u64,
    // @@protoc_insertion_point(field:proof_of_ping.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proof_of_ping.contract_id)
    pub contract_id: ::std::string::String,
    // @@protoc_insertion_point(field:proof_of_ping.nonce)
    pub nonce: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proof_of_ping.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proof_of_ping {
    fn default() -> &'a Proof_of_ping {
        <Proof_of_ping as ::protobuf::Message>::default_instance()
    }
}

impl Proof_of_ping {
    pub fn new() -> Proof_of_ping {
        ::std::default::Default::default()
    }

    // uint64 send_time = 1;

    pub fn send_time(&self) -> u64 {
        self.send_time
    }

    pub fn clear_send_time(&mut self) {
        self.send_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_send_time(&mut self, v: u64) {
        self.send_time = v;
    }

    // uint64 ping_sequence = 2;

    pub fn ping_sequence(&self) -> u64 {
        self.ping_sequence
    }

    pub fn clear_ping_sequence(&mut self) {
        self.ping_sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_sequence(&mut self, v: u64) {
        self.ping_sequence = v;
    }

    // bytes key = 6;

    pub fn key(&self) -> &[u8] {
        &self.key
    }

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // string contract_id = 7;

    pub fn contract_id(&self) -> &str {
        &self.contract_id
    }

    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::string::String) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_id, ::std::string::String::new())
    }

    // string nonce = 11;

    pub fn nonce(&self) -> &str {
        &self.nonce
    }

    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_time",
            |m: &Proof_of_ping| { &m.send_time },
            |m: &mut Proof_of_ping| { &mut m.send_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ping_sequence",
            |m: &Proof_of_ping| { &m.ping_sequence },
            |m: &mut Proof_of_ping| { &mut m.ping_sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Proof_of_ping| { &m.key },
            |m: &mut Proof_of_ping| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "contract_id",
            |m: &Proof_of_ping| { &m.contract_id },
            |m: &mut Proof_of_ping| { &mut m.contract_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &Proof_of_ping| { &m.nonce },
            |m: &mut Proof_of_ping| { &mut m.nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proof_of_ping>(
            "proof_of_ping",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proof_of_ping {
    const NAME: &'static str = "proof_of_ping";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.send_time = is.read_uint64()?;
                },
                16 => {
                    self.ping_sequence = is.read_uint64()?;
                },
                50 => {
                    self.key = is.read_bytes()?;
                },
                58 => {
                    self.contract_id = is.read_string()?;
                },
                90 => {
                    self.nonce = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.send_time != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.send_time);
        }
        if self.ping_sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.ping_sequence);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.key);
        }
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.contract_id);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.send_time != 0 {
            os.write_uint64(1, self.send_time)?;
        }
        if self.ping_sequence != 0 {
            os.write_uint64(2, self.ping_sequence)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(6, &self.key)?;
        }
        if !self.contract_id.is_empty() {
            os.write_string(7, &self.contract_id)?;
        }
        if !self.nonce.is_empty() {
            os.write_string(11, &self.nonce)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proof_of_ping {
        Proof_of_ping::new()
    }

    fn clear(&mut self) {
        self.send_time = 0;
        self.ping_sequence = 0;
        self.key.clear();
        self.contract_id.clear();
        self.nonce.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proof_of_ping {
        static instance: Proof_of_ping = Proof_of_ping {
            send_time: 0,
            ping_sequence: 0,
            key: ::std::vec::Vec::new(),
            contract_id: ::std::string::String::new(),
            nonce: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proof_of_ping {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("proof_of_ping").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proof_of_ping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof_of_ping {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proof_of_ping_resp)
pub struct Proof_of_ping_resp {
    // message fields
    // @@protoc_insertion_point(field:proof_of_ping_resp.ping_sequence)
    pub ping_sequence: u64,
    // @@protoc_insertion_point(field:proof_of_ping_resp.local_endpoint)
    pub local_endpoint: ::std::string::String,
    // @@protoc_insertion_point(field:proof_of_ping_resp.remote_endpoint)
    pub remote_endpoint: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proof_of_ping_resp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proof_of_ping_resp {
    fn default() -> &'a Proof_of_ping_resp {
        <Proof_of_ping_resp as ::protobuf::Message>::default_instance()
    }
}

impl Proof_of_ping_resp {
    pub fn new() -> Proof_of_ping_resp {
        ::std::default::Default::default()
    }

    // uint64 ping_sequence = 1;

    pub fn ping_sequence(&self) -> u64 {
        self.ping_sequence
    }

    pub fn clear_ping_sequence(&mut self) {
        self.ping_sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_sequence(&mut self, v: u64) {
        self.ping_sequence = v;
    }

    // string local_endpoint = 2;

    pub fn local_endpoint(&self) -> &str {
        &self.local_endpoint
    }

    pub fn clear_local_endpoint(&mut self) {
        self.local_endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_endpoint(&mut self, v: ::std::string::String) {
        self.local_endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.local_endpoint
    }

    // Take field
    pub fn take_local_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.local_endpoint, ::std::string::String::new())
    }

    // string remote_endpoint = 3;

    pub fn remote_endpoint(&self) -> &str {
        &self.remote_endpoint
    }

    pub fn clear_remote_endpoint(&mut self) {
        self.remote_endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_remote_endpoint(&mut self, v: ::std::string::String) {
        self.remote_endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remote_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.remote_endpoint
    }

    // Take field
    pub fn take_remote_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.remote_endpoint, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ping_sequence",
            |m: &Proof_of_ping_resp| { &m.ping_sequence },
            |m: &mut Proof_of_ping_resp| { &mut m.ping_sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "local_endpoint",
            |m: &Proof_of_ping_resp| { &m.local_endpoint },
            |m: &mut Proof_of_ping_resp| { &mut m.local_endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remote_endpoint",
            |m: &Proof_of_ping_resp| { &m.remote_endpoint },
            |m: &mut Proof_of_ping_resp| { &mut m.remote_endpoint },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proof_of_ping_resp>(
            "proof_of_ping_resp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proof_of_ping_resp {
    const NAME: &'static str = "proof_of_ping_resp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ping_sequence = is.read_uint64()?;
                },
                18 => {
                    self.local_endpoint = is.read_string()?;
                },
                26 => {
                    self.remote_endpoint = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ping_sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.ping_sequence);
        }
        if !self.local_endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.local_endpoint);
        }
        if !self.remote_endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.remote_endpoint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ping_sequence != 0 {
            os.write_uint64(1, self.ping_sequence)?;
        }
        if !self.local_endpoint.is_empty() {
            os.write_string(2, &self.local_endpoint)?;
        }
        if !self.remote_endpoint.is_empty() {
            os.write_string(3, &self.remote_endpoint)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proof_of_ping_resp {
        Proof_of_ping_resp::new()
    }

    fn clear(&mut self) {
        self.ping_sequence = 0;
        self.local_endpoint.clear();
        self.remote_endpoint.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proof_of_ping_resp {
        static instance: Proof_of_ping_resp = Proof_of_ping_resp {
            ping_sequence: 0,
            local_endpoint: ::std::string::String::new(),
            remote_endpoint: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proof_of_ping_resp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("proof_of_ping_resp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proof_of_ping_resp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof_of_ping_resp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proof_of_device)
pub struct Proof_of_device {
    // message fields
    // @@protoc_insertion_point(field:proof_of_device.send_time)
    pub send_time: u64,
    // @@protoc_insertion_point(field:proof_of_device.ping_sequence)
    pub ping_sequence: u64,
    // @@protoc_insertion_point(field:proof_of_device.nonce)
    pub nonce: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proof_of_device.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proof_of_device {
    fn default() -> &'a Proof_of_device {
        <Proof_of_device as ::protobuf::Message>::default_instance()
    }
}

impl Proof_of_device {
    pub fn new() -> Proof_of_device {
        ::std::default::Default::default()
    }

    // uint64 send_time = 1;

    pub fn send_time(&self) -> u64 {
        self.send_time
    }

    pub fn clear_send_time(&mut self) {
        self.send_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_send_time(&mut self, v: u64) {
        self.send_time = v;
    }

    // uint64 ping_sequence = 2;

    pub fn ping_sequence(&self) -> u64 {
        self.ping_sequence
    }

    pub fn clear_ping_sequence(&mut self) {
        self.ping_sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_sequence(&mut self, v: u64) {
        self.ping_sequence = v;
    }

    // string nonce = 11;

    pub fn nonce(&self) -> &str {
        &self.nonce
    }

    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_time",
            |m: &Proof_of_device| { &m.send_time },
            |m: &mut Proof_of_device| { &mut m.send_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ping_sequence",
            |m: &Proof_of_device| { &m.ping_sequence },
            |m: &mut Proof_of_device| { &mut m.ping_sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &Proof_of_device| { &m.nonce },
            |m: &mut Proof_of_device| { &mut m.nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proof_of_device>(
            "proof_of_device",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proof_of_device {
    const NAME: &'static str = "proof_of_device";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.send_time = is.read_uint64()?;
                },
                16 => {
                    self.ping_sequence = is.read_uint64()?;
                },
                90 => {
                    self.nonce = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.send_time != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.send_time);
        }
        if self.ping_sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.ping_sequence);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.send_time != 0 {
            os.write_uint64(1, self.send_time)?;
        }
        if self.ping_sequence != 0 {
            os.write_uint64(2, self.ping_sequence)?;
        }
        if !self.nonce.is_empty() {
            os.write_string(11, &self.nonce)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proof_of_device {
        Proof_of_device::new()
    }

    fn clear(&mut self) {
        self.send_time = 0;
        self.ping_sequence = 0;
        self.nonce.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proof_of_device {
        static instance: Proof_of_device = Proof_of_device {
            send_time: 0,
            ping_sequence: 0,
            nonce: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proof_of_device {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("proof_of_device").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proof_of_device {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof_of_device {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proof_of_device_resp)
pub struct Proof_of_device_resp {
    // message fields
    // @@protoc_insertion_point(field:proof_of_device_resp.ping_sequence)
    pub ping_sequence: u64,
    // special fields
    // @@protoc_insertion_point(special_field:proof_of_device_resp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proof_of_device_resp {
    fn default() -> &'a Proof_of_device_resp {
        <Proof_of_device_resp as ::protobuf::Message>::default_instance()
    }
}

impl Proof_of_device_resp {
    pub fn new() -> Proof_of_device_resp {
        ::std::default::Default::default()
    }

    // uint64 ping_sequence = 1;

    pub fn ping_sequence(&self) -> u64 {
        self.ping_sequence
    }

    pub fn clear_ping_sequence(&mut self) {
        self.ping_sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_sequence(&mut self, v: u64) {
        self.ping_sequence = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ping_sequence",
            |m: &Proof_of_device_resp| { &m.ping_sequence },
            |m: &mut Proof_of_device_resp| { &mut m.ping_sequence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proof_of_device_resp>(
            "proof_of_device_resp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proof_of_device_resp {
    const NAME: &'static str = "proof_of_device_resp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ping_sequence = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ping_sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.ping_sequence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ping_sequence != 0 {
            os.write_uint64(1, self.ping_sequence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proof_of_device_resp {
        Proof_of_device_resp::new()
    }

    fn clear(&mut self) {
        self.ping_sequence = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proof_of_device_resp {
        static instance: Proof_of_device_resp = Proof_of_device_resp {
            ping_sequence: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proof_of_device_resp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("proof_of_device_resp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proof_of_device_resp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof_of_device_resp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nping.proto\"\x9a\x01\n\rproof_of_ping\x12\x1b\n\tsend_time\x18\x01\
    \x20\x01(\x04R\x08sendTime\x12#\n\rping_sequence\x18\x02\x20\x01(\x04R\
    \x0cpingSequence\x12\x10\n\x03key\x18\x06\x20\x01(\x0cR\x03key\x12\x1f\n\
    \x0bcontract_id\x18\x07\x20\x01(\tR\ncontractId\x12\x14\n\x05nonce\x18\
    \x0b\x20\x01(\tR\x05nonce\"\x89\x01\n\x12proof_of_ping_resp\x12#\n\rping\
    _sequence\x18\x01\x20\x01(\x04R\x0cpingSequence\x12%\n\x0elocal_endpoint\
    \x18\x02\x20\x01(\tR\rlocalEndpoint\x12'\n\x0fremote_endpoint\x18\x03\
    \x20\x01(\tR\x0eremoteEndpoint\"i\n\x0fproof_of_device\x12\x1b\n\tsend_t\
    ime\x18\x01\x20\x01(\x04R\x08sendTime\x12#\n\rping_sequence\x18\x02\x20\
    \x01(\x04R\x0cpingSequence\x12\x14\n\x05nonce\x18\x0b\x20\x01(\tR\x05non\
    ce\";\n\x14proof_of_device_resp\x12#\n\rping_sequence\x18\x01\x20\x01(\
    \x04R\x0cpingSequenceb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Proof_of_ping::generated_message_descriptor_data());
            messages.push(Proof_of_ping_resp::generated_message_descriptor_data());
            messages.push(Proof_of_device::generated_message_descriptor_data());
            messages.push(Proof_of_device_resp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
